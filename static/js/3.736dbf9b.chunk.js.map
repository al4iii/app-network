{"version":3,"sources":["components/Music/Music.module.css","components/Music/ACDC Recovered - Highway to Hell.mp3","components/Music/components/controls/Button.js","components/Music/components/controls/ControlPanel.js","components/Music/components/slider/Slider.js","components/Music/Music.jsx"],"names":["module","exports","Button","play","isPlaying","className","onClick","ControlPanel","duration","currentTime","secondsToHms","seconds","hours","min","parseInt","sec","Slider","percentage","onChange","useState","position","setPosition","marginLeft","setMarginLeft","progressBarWidth","setProgressBarWidth","rangeRef","useRef","thumbRef","useEffect","rangeWidth","current","getBoundingClientRect","width","thumbWidth","centerThumb","centerProgressBar","style","ref","left","type","value","step","Music","setPercentage","setIsPlaying","setDuration","setCurrentTime","audioRef","styles","h1","e","audio","target","onTimeUpdate","percent","currentTarget","toFixed","time","onLoadedData","src","song","volume","pause"],"mappings":"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","file":"static/js/3.736dbf9b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"app-container\":\"Music_app-container__1uCMC\"};","export default __webpack_public_path__ + \"static/media/ACDC Recovered - Highway to Hell.155b771f.mp3\";","import React from \"react\";\r\nimport \"./button.css\";\r\n\r\nconst Button = ({ play, isPlaying }) => {\r\n  return (\r\n    <div className=\"btn-container\">\r\n      <div onClick={play} className={isPlaying ? \"btn-stop\" : \"btn-play\"}></div>\r\n    </div>\r\n  );\r\n};\r\nexport default Button;\r\n","import React from \"react\";\r\nimport Button from \"./Button\";\r\nimport \"./control-panel.css\";\r\n\r\nconst ControlPanel = ({ play, isPlaying, duration, currentTime }) => {\r\n  const secondsToHms = (seconds) => {\r\n    if (!seconds) return \"00m 00s\";\r\n    let duration = seconds;\r\n    let hours = duration / 3600;\r\n    duration = duration % 3600;\r\n    let min = parseInt(duration / 60);\r\n    duration = duration % 60;\r\n    let sec = parseInt(duration);\r\n    if (sec < 10) {\r\n      sec = `0${sec}`;\r\n    }\r\n    if (min < 10) {\r\n      min = `0${min}`;\r\n    }\r\n    if (parseInt(hours, 10) > 0) {\r\n      return `${parseInt(hours, 10)}h ${min}m ${sec}s`;\r\n    } else if (min == 0) {\r\n      return `00m ${sec}s`;\r\n    } else {\r\n      return `${min}m ${sec}s`;\r\n    }\r\n  };\r\n  return (\r\n    <div className=\"control-panel\">\r\n      <div className=\"timer\">{secondsToHms(currentTime)}</div>\r\n      <Button play={play} isPlaying={isPlaying} />\r\n      <div className=\"timer\">{secondsToHms(duration)}</div>\r\n    </div>\r\n  );\r\n};\r\nexport default ControlPanel;\r\n","import { useState, useRef, useEffect } from 'react'\r\nimport './slider.css'\r\nimport './thumb.css'\r\n\r\nfunction Slider({ percentage = 0, onChange }) {\r\n  const [position, setPosition] = useState(0)\r\n  const [marginLeft, setMarginLeft] = useState(0)\r\n  const [progressBarWidth, setProgressBarWidth] = useState(0)\r\n\r\n  const rangeRef = useRef()\r\n  const thumbRef = useRef()\r\n\r\n  useEffect(() => {\r\n    const rangeWidth = rangeRef.current.getBoundingClientRect().width\r\n    const thumbWidth = thumbRef.current.getBoundingClientRect().width\r\n    const centerThumb = (thumbWidth / 100) * percentage * -1\r\n    const centerProgressBar =\r\n      thumbWidth + (rangeWidth / 100) * percentage - (thumbWidth / 100) * percentage\r\n    setPosition(percentage)\r\n    setMarginLeft(centerThumb)\r\n    setProgressBarWidth(centerProgressBar)\r\n  }, [percentage])\r\n\r\n  return (\r\n    <div className='slider-container'>\r\n      <div\r\n        className='progress-bar-cover'\r\n        style={{\r\n          width: `${progressBarWidth}px`\r\n        }}\r\n      ></div>\r\n      <div\r\n        className='thumb'\r\n        ref={thumbRef}\r\n        style={{\r\n          left: `${position}%`,\r\n          marginLeft: `${marginLeft}px`\r\n        }}\r\n      ></div>\r\n      <input\r\n        type='range'\r\n        value={position}\r\n        ref={rangeRef}\r\n        step='0.01'\r\n        className='range'\r\n        onChange={onChange}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Slider\r\n","import { useState, useRef } from \"react\";\r\nimport song from \"./ACDC Recovered - Highway to Hell.mp3\";\r\nimport ControlPanel from \"./components/controls/ControlPanel\";\r\nimport Slider from \"./components/slider/Slider\";\r\n\r\nimport styles from \"./Music.module.css\";\r\n\r\nconst Music = () => {\r\n  const [percentage, setPercentage] = useState(0);\r\n  const [isPlaying, setIsPlaying] = useState(false);\r\n  const [duration, setDuration] = useState(0);\r\n  const [currentTime, setCurrentTime] = useState(0);\r\n  const audioRef = useRef();\r\n  const onChange = (e) => {\r\n    const audio = audioRef.current;\r\n    audio.currentTime = (audio.duration / 100) * e.target.value;\r\n    setPercentage(e.target.value);\r\n  };\r\n  const play = () => {\r\n    const audio = audioRef.current;\r\n    audio.volume = 0.1;\r\n    if (!isPlaying) {\r\n      setIsPlaying(true);\r\n      audio.play();\r\n    }\r\n    if (isPlaying) {\r\n      setIsPlaying(false);\r\n      audio.pause();\r\n    }\r\n  };\r\n  const getCurrDuration = (e) => {\r\n    const percent = (\r\n    (e.currentTarget.currentTime / e.currentTarget.duration) * 100).toFixed(2);\r\n    const time = e.currentTarget.currentTime;\r\n    setPercentage(+percent);\r\n    setCurrentTime(time.toFixed(2));\r\n  };\r\n  return (\r\n    <div className=\"app-container\">\r\n      <h1 className={styles.h1}>Audio Player</h1>\r\n      <Slider percentage={percentage} onChange={onChange} />\r\n      <audio\r\n        ref={audioRef}\r\n        onTimeUpdate={getCurrDuration}\r\n        onLoadedData={(e) => {\r\n          setDuration(e.currentTarget.duration.toFixed(2));\r\n        }}\r\n        src={song}\r\n      ></audio>\r\n      <ControlPanel\r\n        play={play}\r\n        isPlaying={isPlaying}\r\n        duration={duration}\r\n        currentTime={currentTime}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Music;\r\n"],"sourceRoot":""}