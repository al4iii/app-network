{"version":3,"sources":["components/Dialods/Dialods.module.css","components/Profile/MyPosts/ProfileInfo/ProfileInfo.module.css","components/MyToDoList/components/InputForm/InputForm.module.css","components/Login/Login.module.css","components/Dialods/Message/Message.module.css","common/FormsControls/FormsControls.module.css","Pages/Chat/ChatPage.module.css","components/Dialods/DialodItem/DialodItem.module.css","components/Profile/MyPosts/MyPosts.module.css","components/MyToDoList/components/ToDo/ToDo.module.css","components/MyToDoList/components/TaskIndicator/TaskIndicator.module.css","common/Button/Button.module.css","common/Preloader/Preloader.module.css","components/MyToDoList/MyToDoList.module.css","components/MyToDoList/components/ToDoList/ToDoList.module.css","components/Users/Users.module.css","reportWebVitals.js","components/Setting/Setting.tsx","components/Dialods/Message/Message.tsx","components/Dialods/DialodItem/DialodItem.tsx","common/Button/Button.tsx","common/FormsControls/FormsControls.tsx","helpers/validators/validators.ts","API/api.ts","components/Dialods/Dialods.tsx","redux/dialogs-reduser.ts","components/Dialods/DialodsConteiner.tsx","API/ProfileAPI.ts","redux/profile-reduser.ts","img/loader.svg","common/Preloader/Preloader.tsx","redux/profile-selector.js","components/Profile/MyPosts/ProfileInfo/ProfileStatusWithHooks.tsx","img/user-male.png","components/Profile/MyPosts/ProfileInfo/AddNewPost.tsx","components/Profile/MyPosts/ProfileInfo/ProfileData.tsx","components/Profile/MyPosts/ProfileInfo/ProfileDataForm.tsx","components/Profile/MyPosts/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/ProfileInfo/ProfileInfoConteiner.tsx","img/like.png","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsConteiner.tsx","components/Profile/Profile.tsx","components/HOC/withSuspense.tsx","components/Profile/ProfileContainer.tsx","components/Login/LoginReduxForm.tsx","API/AuthAPI.ts","API/SecurityAPI.ts","redux/auth-reduser.ts","components/Login/login-selector.ts","components/Login/Login.tsx","Pages/Chat/ChatPage.tsx","helpers/validators/objects-helpers.ts","API/UserAPI.ts","redux/users-reduser.ts","redux/app-reduser.ts","redux/redux-store.ts","components/MyToDoList/components/InputForm/InputForm.jsx","components/MyToDoList/components/ToDo/ToDo.jsx","components/MyToDoList/components/ToDoList/ToDoList.jsx","components/MyToDoList/components/TaskIndicator/TaskIndicator.jsx","components/MyToDoList/MyToDoList.jsx","components/Users/User.tsx","redux/users-selector.ts","components/Users/UsersSearchForm.tsx","components/Users/Users.tsx","components/Users/UsersConteiner.tsx","redux/auth-selector.ts","components/Header/Header.tsx","common/UsersStatistic/UsersStatistic.jsx","App.tsx","index.tsx","components/Profile/MyPosts/Post/Post.module.css"],"names":["module","exports","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Setting","span","level","Message","message","myProfilePhoto","className","styles","messages","avatar","src","alt","DialodItem","id","name","dialog","to","Button","props","button","onClick","text","FormControl","meta","touched","error","children","hasError","formControl","Textarea","input","restProps","Input","createField","placeholder","validate","component","type","Field","ResultCode","ResultCodeWithCaptcha","reaquired","value","maxLengthCreater","maxLength","length","maxLength100","AddMessegeFormRedux","reduxForm","form","handleSubmit","onSubmit","textarea","Dialods","dialogs","newMessages","DialogElemenst","map","d","messagesElemenst","m","items","values","newMessageText","initialState","active","actions","dialodsReducer","state","action","compose","connect","dialogsPage","profilePage","instanse","axios","create","withCredentials","headers","baseURL","profileAPI","userId","get","response","data","file","formData","FormData","append","put","profile","status","posts","like","newPost","photo","getUser","dispatch","a","profileReducer","filter","p","postId","Preloader","loader","getProfile","getUserId","auth","selectStatus","selectTotalItemsCount","usersPage","totalUsersCount","ProfileStatusWithHooks","getStatus","updateStatus","statusToRedux","useSelector","useState","editMode","setEditMode","setStatus","useEffect","profile_span","button_status","autoFocus","onChange","e","currentTarget","maxLength10","AddNewPostRedux","enter","Contact","contactTitle","contactValue","ProfileData","isOwner","goToEditMode","profile_info","profile_item","fullName","aboutMe","lookingForAJob","lookingForAJobDescription","Object","keys","contacts","key","ProfileDataFormReduxForm","console","log","ProfileInfo","myId","addPosts","savePhoto","saveProfile","myPosts","photos","large","user","profile_img","profile_addPhoto","target","files","initialValues","newPostText","reset","resultCode","getState","stopSubmit","_error","Promise","reject","Post","messege","post","img","likes","MyPosts","postElemenst","reverse","h3","MyPostsMemorized","React","memo","Profile","useDispatch","ProfileInfoConteiner","MyPostsConteiner","withSuspense","WrappedComponent","Suspense","fallback","ProfileConteiner","refreshProfile","match","params","this","Component","withAuthRedirect","withRouter","captchaUrl","formSummaryError","style","margin","href","authAPI","email","password","rememberMe","captcha","delete","securityAPI","isFetching","login","isAuth","payload","getCaptchaUrl","url","authReducer","getIsAuth","Login","Success","CaptchaIsRequired","TextArea","wsChanal","WebSocket","ChatPage","Chat","Messages","setMessages","addEventListener","JSON","parse","prevMessages","messeges","index","size","userName","AddMessageForm","setMessage","rows","send","updateObjectInArray","itemsId","objPropName","newObjProps","u","usersAPI","pageNumber","pageSize","term","friend","users","currentPage","followingInProgress","totalCount","getUsersAC","page","usersReducer","followed","initialized","appReducer","rootRedusers","combineReducers","app","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","store","createStore","applyMiddleware","thunk","InputForm","input_form","formik","add","ToDo","to_do","task","right","onDelete","ToDoList","toDoList","lists","list","TaskIndicator","header","number","MyToDoList","handleChange","setState","preventDefault","document","getElementById","handleDelete","filteredList","todolist","User","unfollow","follow","userPhoto","user_img","small","disabled","some","user_info","item_info","substr","getUsers","getPageSize","createSelector","getTotalUsersCount","getCurrentPage","getIsFetching","getFollowingInProgress","getUsersFilter","userFormValitate","UsersSearchForm","enableReinitialize","String","setSubmitting","onFilterChanged","isSubmitting","as","Users","onFollow","onUnfollow","history","useHistory","parsed","queryString","location","search","actualPage","actualFilter","Number","query","push","pathname","pagination","showSizeChanger","defaultCurrent","total","current","UserPage","selectAuth","selectAvatar","selectLogin","Header","Layout","offset","theme","mode","defaultSelectedKeys","Item","width","keyboard","UsersStatistic","userStatistic","gutter","title","SubMenu","Menu","Content","Footer","Sider","News","lazy","Music","App","initializeApp","padding","defaultOpenKeys","height","icon","UserOutlined","LaptopOutlined","NotificationOutlined","minHeight","exact","path","render","DialodsConteiner","textAlign","AppContainer","promise","profileReduser","all","MainApp","StrictMode","ReactDOM"],"mappings":"+EACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,MAAQ,uBAAuB,SAAW,0BAA0B,SAAW,0BAA0B,OAAS,wBAAwB,KAAO,wB,mBCAtMD,EAAOC,QAAU,CAAC,IAAM,yBAAyB,QAAU,6BAA6B,MAAQ,2BAA2B,SAAW,8BAA8B,OAAS,4BAA4B,KAAO,0BAA0B,QAAU,6BAA6B,YAAc,iCAAiC,aAAe,kCAAkC,aAAe,kCAAkC,aAAe,kCAAkC,cAAgB,mCAAmC,OAAS,4BAA4B,iBAAmB,wC,oBCA9jBD,EAAOC,QAAU,CAAC,WAAa,8BAA8B,OAAS,0BAA0B,MAAQ,yBAAyB,IAAM,yB,oBCAvID,EAAOC,QAAU,CAAC,iBAAmB,gCAAgC,MAAQ,uB,oBCA7ED,EAAOC,QAAU,CAAC,SAAW,0BAA0B,QAAU,yBAAyB,OAAS,0B,oBCAnGD,EAAOC,QAAU,CAAC,YAAc,mCAAmC,MAAQ,6BAA6B,YAAc,qC,oBCAtHD,EAAOC,QAAU,CAAC,OAAS,yBAAyB,SAAW,2BAA2B,SAAW,6B,oBCArGD,EAAOC,QAAU,CAAC,OAAS,6B,oBCA3BD,EAAOC,QAAU,CAAC,GAAK,oBAAoB,KAAO,wB,oBCAlDD,EAAOC,QAAU,CAAC,MAAQ,oBAAoB,MAAQ,sB,oBCAtDD,EAAOC,QAAU,CAAC,OAAS,8BAA8B,IAAM,6B,oBCA/DD,EAAOC,QAAU,CAAC,OAAS,yB,oBCA3BD,EAAOC,QAAU,CAAC,OAAS,4B,oBCA3BD,EAAOC,QAAU,CAAC,SAAW,+B,oBCA7BD,EAAOC,QAAU,CAAC,SAAW,6B,mBCA7BD,EAAOC,QAAU,CAAC,MAAQ,qBAAqB,UAAY,yBAAyB,SAAW,wBAAwB,KAAO,oBAAoB,OAAS,sBAAsB,UAAY,yBAAyB,UAAY,yBAAyB,aAAe,4BAA4B,WAAa,0BAA0B,KAAO,sB,mGCWrUC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,6ECUCQ,EAXsB,WACnC,OACE,cAAC,IAAD,UACE,eAAC,IAAD,CAAKC,KAAM,GAAX,UACA,cAAC,IAAD,CAAOC,MAAO,EAAd,qBACE,0E,oCCQOC,EAXsB,SAAC,GAAiC,IAA/BC,EAA8B,EAA9BA,QAASC,EAAqB,EAArBA,eAC/C,OACE,sBAAKC,UAAWC,IAAOC,SAAvB,UACE,qBAAKF,UAAWC,IAAOH,QAAvB,SAAiCA,IACjC,qBAAKE,UAAWC,IAAOE,OAAvB,SACE,qBAAKC,IAAKL,EAAgBM,IAAI,iB,0BCMvBC,EAVwB,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,GAAIC,EAAW,EAAXA,KAC5C,OACE,qBAAKR,UAAWC,IAAOQ,OAAvB,SACE,cAAC,IAAD,CAASC,GAAE,mBAAcH,GAAMP,UAAWC,IAAOQ,OAAjD,SACGD,O,kBCEMG,EARoB,SAACC,GAClC,OACE,8BACE,wBAAQZ,UAAWC,IAAOY,OAAQC,QAASF,EAAME,QAAjD,SAA2DF,EAAMG,U,oDCDjEC,EAA8C,SAAC,GAA2C,IAAD,IAAxCC,KAAQC,EAAgC,EAAhCA,QAASC,EAAuB,EAAvBA,MAASC,EAAc,EAAdA,SACzEC,EAAWH,GAAWC,EAC5B,OACE,sBAAKnB,UAAS,UAAKC,IAAOqB,YAAZ,YAA2BD,EAAWpB,IAAOkB,MAAQ,IAAnE,UACE,8BAAMC,IACLC,GAAY,+BAAOF,QAKbI,EAAwC,SAACX,GAAW,IACvDY,EAA+BZ,EAA/BY,MAAiBC,GAAcb,EAAxBK,KAD+C,YACvBL,EADuB,mBAE9D,OACE,cAAC,EAAD,2BAAiBA,GAAjB,aACE,oDAAcY,GAAWC,QAKlBC,EAAsC,SAACd,GAAW,IACrDY,EAA+BZ,EAA/BY,MAAiBC,GAAcb,EAAxBK,KAD6C,YACrBL,EADqB,mBAE5D,OACE,cAAC,EAAD,2BAAiBA,GAAjB,aACE,iDAAWY,GAAWC,QAKrB,SAASE,EAA0CC,EAAkCpB,EACzFqB,EAAqCC,GAA+D,IAAtBC,EAAqB,uDAAd,GAAInB,EAAU,uDAAJ,GAChG,OACE,qBAAKZ,UAAWC,IAAO0B,YAAvB,SACE,cAACK,EAAA,EAAD,aACEJ,YAAaA,EACbpB,KAAMA,EACNqB,SAAUA,EACVC,UAAWA,EACXC,KAAMA,GACFnB,MC7CL,ICsCKqB,EAIAC,ED1CCC,EAAgC,SAACC,GAC5C,IAAIA,EACJ,MAAO,oBAGIC,EAAmB,SAACC,GAAD,OAA2C,SAACF,GAC1E,GAAIA,EAAMG,OAASD,EAAW,MAAM,iBAAN,OAAwBA,EAAxB,aE+B1BE,EAAeH,EAAiB,IAgBhCI,EAAsBC,YAAsC,CAAEC,KAAM,wBAA9CD,EAbgE,SAAC,GAAsB,IAApBE,EAAmB,EAAnBA,aAC7F,OACE,sBAAMC,SAAUD,EAAc5C,UAAWC,IAAO6C,SAAhD,SACE,gCACGnB,EAAgC,gBAAgB,iBAAiB,CAACQ,EAAWK,GAAcjB,GAC5F,qBAAKvB,UAAWC,IAAOY,OAAvB,SACE,cAAC,EAAD,CAAQE,KAAM,mBASTgC,EAvCsB,SAAC,GAAwD,IAAtDC,EAAqD,EAArDA,QAAS9C,EAA4C,EAA5CA,SAAUH,EAAkC,EAAlCA,eAAgBkD,EAAkB,EAAlBA,YACrEC,EAAiBF,EAAQG,KAAI,SAACC,GAAD,OAAQ,cAAC,EAAD,CAAY5C,KAAM4C,EAAE5C,KAAiBD,GAAI6C,EAAE7C,IAAZ6C,EAAE7C,OACtE8C,EAAmBnD,EAASiD,KAAI,SAACG,GAAD,OAAQ,cAAC,EAAD,CAASxD,QAASwD,EAAExD,QAAoBC,eAAgBA,GAAtBuD,EAAE/C,OAChF,OACE,sBAAKP,UAAWC,IAAO+C,QAAvB,UACE,qBAAKhD,UAAWC,IAAOsD,MAAvB,SAA+BL,IAC/B,qBAAKlD,UAAWC,IAAOC,SAAvB,SAAkCmD,IAClC,cAACZ,EAAD,CACEI,SAAU,SAACW,GACTP,EAAYO,EAAOC,gBACnBD,EAAOC,eAAiB,U,gBCxB9BC,EAAe,CACjBV,QAAS,CACP,CAAEzC,GAAI,EAAGC,KAAM,OAAQmD,OAAQ,UAC/B,CAAEpD,GAAI,EAAGC,KAAM,QAASmD,OAAQ,KAChC,CAAEpD,GAAI,EAAGC,KAAM,QAASmD,OAAQ,KAChC,CAAEpD,GAAI,EAAGC,KAAM,aAAcmD,OAAQ,MAEvCzD,SAAU,CACR,CAAEK,GAAI,EAAGT,QAAS,WAClB,CAAES,GAAI,EAAGT,QAAS,gBAClB,CAAES,GAAI,EAAGT,QAAS,QAClB,CAAES,GAAI,EAAGT,QAAS,iBAmBT8D,EACC,SAAC9D,GAAD,MAAsB,CAAEiC,KAAM,sBAAuBjC,YAUpD+D,EA1BQ,WAAiD,IAAhDC,EAA+C,uDAAvCJ,EAAcK,EAAyB,uCACrE,OAAQA,EAAOhC,MACb,IAAK,sBACH,OAAO,2BACF+B,GADL,IAEE5D,SAAS,GAAD,mBACH4D,EAAM5D,UADH,CAEN,CAAEK,GAAIuD,EAAM5D,SAASqC,OAAS,EAAGzC,QAASiE,EAAOjE,aAGvD,QACE,OAAOgE,I,gBChBPb,GAAcW,EAELI,eAA6BC,aAVtB,SAACH,GACrB,MAAO,CACLd,QAASc,EAAMI,YAAYlB,QAC3B9C,SAAU4D,EAAMI,YAAYhE,SAC5BH,eAAgB+D,EAAMK,YAAYpE,kBAM+B,CAACkD,iBAAvDe,CAAsEjB,G,uCHbxEqB,G,QAAWC,EAAMC,OAAO,CACnCC,iBAAiB,EACjBC,QAAS,CACP,UAAW,wCAEbC,QAAS,mD,SAgCCxC,O,qBAAAA,I,kBAAAA,M,cAIAC,O,2CAAAA,M,KIrCL,IAAMwC,GACA,SAACC,GAAD,OACTP,GAASQ,IAAT,0BAAwCD,IAAUvF,MAAK,SAACyF,GAAD,OAAcA,EAASC,SAFrEJ,GAGA,SAACK,GACV,IAAMC,EAAW,IAAIC,SAErB,OADAD,EAASE,OAAO,QAASH,GAClBX,GACJe,IADI,iBACkBH,EAAU,CAC/BR,QAAS,CAAE,eAAgB,yBAE5BpF,MAAK,SAACyF,GAAD,OAAcA,EAASC,SAVtBJ,GAYE,SAACU,GACZ,OAAOhB,GAASe,IAAT,WAAkEC,GAAShG,MAAK,SAACyF,GAAD,OAAcA,EAASC,SAbrGJ,GAeG,SAACW,GACbjB,GACGe,IADH,kBAC0B,CAAEE,OAAQA,IACjCjG,MAAK,SAACyF,GAAD,OAAcA,EAASC,SAlBtBJ,GAoBF,SAACC,GACR,OAAOP,GACJQ,IADI,kBACwBD,IAC5BvF,MAAK,SAACyF,GAAD,OAAcA,EAASC,SCzB/BpB,GAAe,CACjB4B,MAAO,CACL,CAAE/E,GAAI,EAAGT,QAAS,mBAAoByF,KAAM,GAC5C,CAAEhF,GAAI,EAAGT,QAAS,OAAQyF,KAAM,IAChC,CAAEhF,GAAI,EAAGT,QAAS,eAAgByF,KAAM,KACxC,CAAEhF,GAAI,EAAGT,QAAS,kBAAmByF,KAAM,IAC3C,CAAEhF,GAAI,EAAGT,QAAS,uBAAwByF,KAAM,MAElDH,QAAS,KACTrF,eAAgB,KAChBsF,OAAQ,KAqCGzB,GACF,SAAC4B,GAAD,MAAsB,CAAEzD,KAAM,mBAAoByD,YADhD5B,GAGK,SAACwB,GAAD,MAA2B,CAAErD,KAAM,2BAA4BqD,YAHpExB,GAIG,SAACwB,GAAD,MAAsB,CAAErD,KAAM,+BAAiCqD,YAJlExB,GAKA,SAACyB,GAAD,MAAqB,CAAEtD,KAAM,qBAAsBsD,WALnDzB,GAMM,SAAC6B,GAAD,MAAqB,CAAE1D,KAAM,oBAAqB0D,UAGxDC,GAAU,SAACf,GAAD,gDAA+B,WAAOgB,GAAP,gBAAAC,EAAA,sEAC/BlB,GAAmBC,GADY,OAChDE,EADgD,OAEpDc,EAAS/B,GAAuBiB,IAFoB,2CAA/B,uDAiCRgB,GA5EQ,WAAmE,IAAjE/B,EAAgE,uDAAxDJ,GAAcK,EAA0C,uCACvF,OAAQA,EAAOhC,MACb,IAAK,mBACH,OAAO,2BACF+B,GADL,IAEEwB,MAAM,GAAD,mBACAxB,EAAMwB,OADN,CAEH,CAAE/E,GAAIuD,EAAMwB,MAAM/C,OAAS,EAAGzC,QAASiE,EAAOyB,QAASD,KAAM,OAGnE,IAAK,2BACH,OAAO,2BAAKzB,GAAZ,IAAmBsB,QAASrB,EAAOqB,UAErC,IAAK,+BACH,OAAO,2BAAKtB,GAAZ,IAAmB/D,eAAgBgE,EAAOqB,UAE5C,IAAK,qBACH,OAAO,2BAAKtB,GAAZ,IAAmBuB,OAAQtB,EAAOsB,SAEpC,IAAK,sBACH,OAAO,2BACFvB,GADL,IAEEwB,MAAOxB,EAAMwB,MAAMQ,QAAO,SAACC,GAAD,OAAOA,EAAExF,KAAOwD,EAAOiC,YAErD,IAAK,oBACH,OAAO,2BACFlC,GADL,IAEE/D,eAAgBgE,EAAO0B,QAE3B,QACE,OAAO3B,I,kDChDE,OAA0B,mCCc1BmC,GARuB,WACpC,OACE,qBAAKjG,UAAWC,KAAOiG,OAAvB,SACE,qBAAK9F,IAAK8F,GAAQ7F,IAAK,cCThB8F,GAAa,SAACrC,GAAD,OAAWA,EAAMK,YAAYiB,SAC1CgB,GAAY,SAACtC,GAAD,OAAWA,EAAMuC,KAAK1B,QAClC2B,GAAe,SAACxC,GAAD,OAAWA,EAAMK,YAAYkB,QAC5CkB,GAAwB,SAACzC,GAAD,OAAWA,EAAM0C,UAAUC,iBC2CjDC,GAnCoC,SAAC,GAAqC,IAApCC,EAAmC,EAAnCA,UAAUhC,EAAyB,EAAzBA,OAAOiC,EAAkB,EAAlBA,aACpED,EAAUhC,GACV,IAAMkC,EAAgBC,YAAYR,IAFoD,EAGxDS,oBAAS,GAH+C,oBAGjFC,EAHiF,KAGvEC,EAHuE,OAI5DF,mBAASF,GAJmD,oBAIjFxB,EAJiF,KAIzE6B,EAJyE,KAKtFC,qBAAU,WAAQD,EAAUL,KAAkB,CAACA,IAM/C,OACE,sBAAM7G,UAAWC,KAAOoF,OAAxB,WACI2B,GACA,sBAAKhH,UAAWC,KAAOoF,OAAvB,UACE,uBAAMrF,UAAWC,KAAOmH,aAAxB,qBACW/B,GAAU,eAErB,wBAAQvE,QAZK,kBAAMmG,GAAY,IAYAjH,UAAWC,KAAOoH,cAAjD,8BAKHL,GACC,sBAAKhH,UAAWC,KAAOoF,OAAvB,UACE,uBAAOiC,WAAW,EAAMlF,MAAOiD,EAAQkC,SAfxB,SAACC,GAAD,OAAuCN,EAAUM,EAAEC,cAAcrF,UAgBhF,wBAAQpC,UAAWC,KAAOoH,cAAevG,QAnB1B,WAAQmG,GAAY,GACzCL,EAAavB,IAkBP,yBCrCK,OAA0B,sCCqBnCqC,GAAcrF,EAAiB,IA0BtBsF,GAHSjF,YAAyC,CAC/DC,KAAM,eADgBD,EApBpB,SAAC,GAAsB,IAApBE,EAAmB,EAAnBA,aACL,OACE,sBAAMC,SAAUD,EAAc5C,UAAWC,KAAO2H,MAAhD,SACE,gCACE,qBAAK5H,UAAWC,KAAO6C,SAAvB,SACGnB,EACC,aACA,cACA,CAACQ,EAAWuF,IACZnG,KAGJ,qBAAKvB,UAAWC,KAAOY,OAAvB,SACE,wDCqBGgH,GAAsC,SAAC,GAAoC,IAAlCC,EAAiC,EAAjCA,aAAcC,EAAmB,EAAnBA,aAClE,OACE,gCACE,uBAAM/H,UAAWC,KAAOmH,aAAxB,cAAwCU,KAD1C,IAEGC,MAKQC,GAzD0B,SAAC,GAAwC,IAAtC5C,EAAqC,EAArCA,QAAS6C,EAA4B,EAA5BA,QAASC,EAAmB,EAAnBA,aAC5D,OACE,sBAAKlI,UAAWC,KAAOkI,aAAvB,UACE,sBAAKnI,UAAWC,KAAOmI,aAAvB,UACE,sBAAMpI,UAAWC,KAAOmH,aAAxB,wBACChC,EAAQiD,YAEX,sBAAKrI,UAAWC,KAAOmI,aAAvB,UACE,sBAAMpI,UAAWC,KAAOmH,aAAxB,kBACChC,EAAQT,UAEX,sBAAK3E,UAAWC,KAAOmI,aAAvB,UACE,sBAAMpI,UAAWC,KAAOmH,aAAxB,wBACChC,EAAQkD,WAEX,sBAAKtI,UAAWC,KAAOmI,aAAvB,UACE,sBAAMpI,UAAWC,KAAOmH,aAAxB,8BACChC,EAAQmD,eAAiB,MAAQ,QAEnCnD,EAAQmD,gBACP,sBAAKvI,UAAWC,KAAOmI,aAAvB,UACE,sBAAMpI,UAAWC,KAAOmH,aAAxB,qCACChC,EAAQoD,6BAGb,sBAAKxI,UAAWC,KAAOmI,aAAvB,UACE,sBAAMpI,UAAWC,KAAOmH,aAAxB,uBACCqB,OAAOC,KAAKtD,EAAQuD,UAAUxF,KAAI,SAACyF,GAClC,OACE,cAAC,GAAD,CAAmBd,aAAcc,EAAKb,aAAc3C,EAAQuD,SAASC,IAAvDA,SAIpB,8BACGX,GACC,8BACE,wBAAQnH,QAASoH,EAAjB,0BC8CGW,GAJkBnG,YAAkC,CACjEC,KAAM,eADyBD,EAtE0B,SAAC,GAA+C,IAA7CE,EAA4C,EAA5CA,aAAcwC,EAA8B,EAA9BA,QAAS6C,EAAqB,EAArBA,QAAS9G,EAAY,EAAZA,MAE5F,OADA2H,QAAQC,IAAI,WAEV,uBAAMlG,SAAUD,EAAhB,UACGqF,GACC,uBAAMjI,UAAWC,KAAOkI,aAAxB,UACE,qBAAKnI,UAAWC,KAAOmI,aAAvB,SACE,uBAAMpI,UAAWC,KAAOmH,aAAxB,uBACa,IACVzF,EAA2B,YAAa,WAAY,GAAID,QAG7D,qBAAK1B,UAAWC,KAAOmI,aAAvB,SACE,uBAAMpI,UAAWC,KAAOmH,aAAxB,4BAEGzF,EACC,GACA,iBACA,GACAD,EACA,iBAIN,sBAAK1B,UAAWC,KAAOmI,aAAvB,UACE,sBAAMpI,UAAWC,KAAOmH,aAAxB,qCACCzF,EACC,mBACA,4BACA,GACAJ,EACA,OAGJ,sBAAKvB,UAAWC,KAAOmI,aAAvB,UACE,sBAAMpI,UAAWC,KAAOmH,aAAxB,uBACCzF,EACC,iBACA,UACA,GACAJ,EACA,OAGJ,sBAAKvB,UAAWC,KAAOmI,aAAvB,UACE,sBAAMpI,UAAWC,KAAOmH,aAAxB,uBACCqB,OAAOC,KAAKtD,EAAQuD,UAAUxF,KAAI,SAACyF,GAElC,OADAE,QAAQC,IAAIH,GAEV,gCACE,4BAAIA,IADN,IACgB,IACbjH,EAAYiH,EAAD,mBAAkBA,GAAO,GAAIrH,EAAU,MAF3CqH,YASpB,gCACGzH,GAAS,8BAAMA,IACf8G,GACC,8BACE,qDCtBGe,GApC0B,SAAC,GAAmG,IAAjG5D,EAAgG,EAAhGA,QAASC,EAAuF,EAAvFA,OAAQsB,EAA+E,EAA/EA,UAAiBC,GAA8D,EAApEqC,KAAoE,EAA9DrC,cAAcsC,EAAgD,EAAhDA,SAAUjB,EAAsC,EAAtCA,QAASkB,EAA6B,EAA7BA,UAAWC,EAAkB,EAAlBA,YAAkB,EAC5GrC,oBAAS,GADmG,oBACrIC,EADqI,KAC3HC,EAD2H,KAE1I,IAAK7B,EACH,OAAO,cAAC,GAAD,IAYT,OACE,qBAAKpF,UAAWC,KAAOoJ,QAAvB,SACE,sBAAKrJ,UAAWC,KAAOmF,QAAvB,UACE,qBAAKhF,IAAKgF,EAAQkE,OAAOC,OAASC,GAAMxJ,UAAWC,KAAOwJ,YAAapJ,IAAK,WAC3E4H,GACC,qBAAKjI,UAAWC,KAAOyJ,iBAAvB,SACE,uBAAO3H,KAAM,OAAQwF,SAhBL,SAACC,GACrBA,EAAEmC,OAAOC,OAASpC,EAAEmC,OAAOC,MAAMrH,QACnC4G,EAAU3B,EAAEmC,OAAOC,MAAM,SAiBtB3B,GAAa,cAAC,GAAD,CAAwB5C,OAAQA,EAC1CsB,UAAWA,EAAWhC,OAAQS,EAAQT,OAAQiC,aAAcA,IAG/DI,EAAa,cAAC,GAAD,CAA0BiB,QAASA,EAAS4B,cAAezE,EAASA,QAASA,EAASvC,SAlBzF,SAACmC,GAEhBoE,EAAYpE,GAAU5F,MAAK,WAAO6H,GAAY,SAiBrC,cAAC,GAAD,CAAa7B,QAASA,EAAS6C,QAASA,EAASC,aAAc,kBAAMjB,GAAY,MACtF,cAAC,GAAD,CAAiBpE,SAAU,SAACT,GAAD,OAA8B8G,EAAS9G,EAAM0H,sBCpCjE7F,gBAXO,SAACH,GACrB,MAAO,CACLuB,OAAQvB,EAAMK,YAAYkB,OAC1B4D,KAAMnF,EAAMuC,KAAK1B,UAQ4D,CAAEuE,SVyD3D,SAAC1D,GAAD,gDAA+B,WAAOG,GAAP,UAAAC,EAAA,sDACnDD,EAAS/B,GAAgB4B,IACzBG,EAASoE,YAAM,gBAFoC,2CAA/B,uDUzDqEpD,UViDpE,SAAChC,GAAD,gDAA8B,WAAOgB,GAAP,gBAAAC,EAAA,sEAChClB,GAAqBC,GADW,OACjDE,EADiD,OAErDc,EAAS/B,GAAkBiB,IAF0B,2CAA9B,uDUjD+E+B,aVqD5E,SAACvB,GAAD,gDAA8B,WAAOM,GAAP,UAAAC,EAAA,sDACtDlB,GAAwBW,GACxBM,EAAS/B,GAAkByB,IAF2B,2CAA9B,uDUrD0F8D,UV6D7F,SAACpE,GAAD,gDAA4B,WAAOY,GAAP,gBAAAC,EAAA,sEAC9BlB,GAAqBK,GADS,OAEvB,KADxBF,EAD+C,QAEtCmF,YACXrE,EAAS/B,GAAwBiB,EAASC,KAAKwE,OAAOC,QAHL,2CAA5B,uDU7DwGH,YVmEtG,SAAChE,GAAD,gDAAqC,WAAOO,EAAWsE,GAAlB,kBAAArE,EAAA,6DACxDjB,EAASsF,IAAW5D,KAAK1B,OAD+B,SAEvCD,GAAuBU,GAFgB,UAGlC,KADtBP,EAFwD,QAGjDmF,WAHiD,gBAI5DrE,EAASD,GAAQf,IAJ2C,8BAM5DgB,EAASuE,YAAW,cAAe,CAAEC,OAAQtF,EAAS3E,SAAS,MANH,kBAOrDkK,QAAQC,OAAOxF,EAAS3E,SAAS,KAPoB,4CAArC,0DUnEZ+D,CAAkI+E,I,oBChBlI,OAA0B,iCC0B1BsB,GAfkB,SAAC,GAAuC,IAArCvK,EAAoC,EAApCA,eAAgBwK,EAAoB,EAApBA,QAAShF,EAAW,EAAXA,KAC3D,OACE,qBAAKvF,UAAWC,KAAOqF,MAAvB,SACE,sBAAKtF,UAAWC,KAAOuK,KAAvB,UACE,qBAAKpK,IAAKL,GAAkByJ,GAAMnJ,IAAI,GAAGL,UAAWC,KAAOwK,MAC3D,sBAAMzK,UAAWC,KAAOc,KAAxB,SAA+BwJ,IAC/B,sBAAKvK,UAAWC,KAAOyK,MAAvB,UACE,qBAAKtK,IAAKsK,GAAOrK,IAAI,GAAGL,UAAWC,KAAOsF,OAC1C,qCAAQA,c,qBCTZoF,GAA8B,SAAC/J,GACnC,IAAIgK,EAAe,YAAIhK,EAAM0E,OAAOuF,UAAU1H,KAAI,SAAC4C,GAAD,OAAQ,cAAC,GAAD,CACpDwE,QAASxE,EAAEjG,QAASyF,KAAMQ,EAAER,KAAiBxF,eAAgBa,EAAMb,gBAA5BgG,EAAExF,OAC/C,OACE,sBAAKP,UAAWC,KAAOuK,KAAvB,UACE,oBAAIxK,UAAWC,KAAO6K,GAAtB,uBACCF,MAMQG,GADUC,IAAMC,KAAKN,ICNrB1G,gBAVO,SAACH,GACrB,MAAO,CACLwB,MAAOxB,EAAMK,YAAYmB,MACzBvF,eAAgB+D,EAAMK,YAAYpE,kBAO2C,GAAlEkE,CAAsE0G,ICuBtEO,GA3Be,SAAC,GAAiB,IAAfjD,EAAc,EAAdA,QACzB7C,EAAU0B,YAAYX,IACtBR,EAAWwF,cAgBjB,OACE,gCACE,cAACC,GAAD,CAAsBhG,QAASA,EAAS6C,QAASA,EAAStB,UAjB5C,SAAZA,EAAahC,GACjBgB,EAASgB,EAAUhC,KAiBjBiC,aAfiB,SAAfA,EAAgBvB,GACpBM,EAASiB,EAAavB,KAcQ6D,SAZf,SAAXA,EAAY1D,GAChBG,EAASuD,EAAS1D,KAWgC2D,UATlC,SAAZA,EAAapE,GACjBY,EAASwD,EAAUpE,KAQuDqE,YANxD,SAAdA,EAAehE,GACnBO,EAASyD,EAAYhE,OAMnB,cAACiG,GAAD,QCpBSC,OAVf,SAA2BC,GACzB,OAAO,SAAC3K,GACN,OACE,cAAC,IAAM4K,SAAP,CAAgBC,SAAU,cAAC,GAAD,IAA1B,SACE,cAACF,EAAD,eAAsB3K,Q,SCYxB8K,G,4MACJC,eAAiB,WACf,EAAK/K,MAAM8E,QAAQ,EAAK9E,MAAMgL,MAAMC,OAAOlH,QAAU,EAAK/D,MAAM+D,S,uDAElE,WACEmH,KAAKH,mB,gCAEP,WACIG,KAAKH,mB,oBAET,WACE,OACE,cAAC,GAAD,2BAAaG,KAAKlL,OAAlB,IAAyBqH,SAAU6D,KAAKlL,MAAMgL,MAAMC,OAAOlH,c,GAZlCqG,IAAMe,WAuBtB/H,eACbgI,GACAC,KACAhI,aAToB,SAACH,GACrB,MAAO,CACLa,OAAQyB,GAAUtC,MAOK,CAAG4B,aAHf1B,CAIb0H,I,qBCiBahJ,eAA2C,CAAEC,KAAM,SAAnDD,EAzC4D,SAAC,GAAyC,IAAvCE,EAAsC,EAAtCA,aAAczB,EAAwB,EAAxBA,MAAO+K,EAAiB,EAAjBA,WACjG,OACE,uBAAMrJ,SAAUD,EAAhB,UACGjB,EAA+B,QAAS,QAAS,CAACQ,GAAYT,GAC9DC,EACC,WACA,WACA,CAACQ,GACDT,EACA,YAEDwK,GAAc,qBAAK9L,IAAK8L,EAAY7L,IAAK,eACzC6L,GACCvK,EACE,kBACA,UACA,CAACQ,GACDT,EACA,GACA,IAEHP,GAAS,qBAAKnB,UAAWC,KAAOkM,iBAAvB,SAA0ChL,IACnDQ,EACC,GACA,aACA,GACAD,EACA,YACC,IA1BL,cA4BE,gCACE,4CACA,yBAAQ0K,MAAO,CAAEC,OAAQ,QAAzB,UACG,IACD,mBAAGC,KAAK,8CAAR,iCCnDGC,GACJ,SAAEC,EAAeC,GAAjB,IAAmCC,EAAnC,wDAAuDC,EAAvD,uDAAgF,KAAhF,OACLvI,GACGoG,KADH,aAC4F,CACxFgC,QAAOC,WAAUC,aAAYC,YAE9BvN,MAAK,SAACyF,GAAD,OAAcA,EAASC,SANtByH,GAOH,kBACNnI,GACGwI,OADH,cAEGxN,MAAK,SAACyF,GAAD,OAAcA,EAASC,SAVtByH,GAWP,kBACFnI,GACGQ,IADH,WAEGxF,MAAK,SAACyF,GAAD,OAAcA,EAASC,SCbtB+H,GACI,kBAAMzI,GAASQ,IAAT,4BAA4DxF,MAAK,SAACyF,GAAD,OAAcA,MCClGnB,GAAe,CACjBoJ,YAAY,EACZnI,OAAQ,KACRoI,MAAO,KACPP,MAAO,KACPQ,QAAQ,EACR7M,OAAQ,KACR+L,WAAY,MAgBDtI,GACW,SAACsI,GAAD,MAAyB,CAAEnK,KAAM,+BAAgCkL,QAAS,CAAEf,gBADvFtI,GAEM,SAAEe,EAAuBoI,EAAsBP,EAAsBQ,GAArE,MAA2F,CAC1GjL,KAAM,qBAAsBkL,QAAS,CAAEtI,SAAQoI,QAAOP,QAAOQ,YAkCpDE,GAAgB,2DAAiB,WAAOvH,GAAP,gBAAAC,EAAA,sEACrBiH,KADqB,OACtChI,EADsC,OAE5Cc,EAAS/B,GAA6BiB,EAASC,KAAKqI,MAFR,2CAAjB,uDAWdC,GA7DK,WAAkE,IAAjEtJ,EAAgE,uDAAxDJ,GAAcK,EAA0C,uCACnF,OAAQA,EAAOhC,MACb,IAAK,qBACL,IAAK,+BACH,OAAO,2BACF+B,GACAC,EAAOkJ,SAEd,QACE,OAAOnJ,ICzBAoJ,GAAgB,SAACpJ,GAAD,OAAwBA,EAAMuC,KAAK6F,YACnDmB,GAAY,SAACvJ,GAAD,OAAwBA,EAAMuC,KAAK2G,QCK/CM,GAAkB,SAAC1M,GAC9B,IAAMsL,EAAapF,YAAYoG,IACzBF,EAASlG,YAAYuG,IACrB1H,EAAWwF,cAIjB,OAAI6B,EACK,cAAC,KAAD,CAAUtM,GAAI,aAGrB,sBAAKV,UAAWC,KAAO8M,MAAvB,UACE,uCACA,cAAC,GAAD,CACElK,SAVW,SAACmC,GFyCC,IAAEwH,EAAeC,EAAkBC,EAAqBC,EExCzEhH,GFwCmB6G,EExCJxH,EAASwH,MFwCUC,EExCHzH,EAASyH,SFwCYC,EExCF1H,EAAS0H,WFwCcC,EExCF3H,EAAS2H,QFwC/D,yCACrB,WAAOhH,GAAP,kBAAAC,EAAA,sEACuB2G,GAAcC,EAAOC,EAAUC,EAAYC,GADlE,QACM9H,EADN,QAEemF,aAAe/H,EAAWsL,QACrC5H,EAXyB,yCAAiB,WAAOA,GAAP,wBAAAC,EAAA,sEACvB2G,KADuB,QACxC1H,EADwC,QAE/BmF,aAAe/H,EAAWsL,UAAU,EACpB1I,EAASC,KAA9BvE,EADwC,EACxCA,GAAIwM,EADoC,EACpCA,MAAOP,EAD6B,EAC7BA,MACjB7G,EAAS/B,GAAwBrD,EAAIwM,EAAOP,GAAO,KAJT,2CAAjB,wDAarB3H,EAASmF,aAAe9H,EAAsBsL,mBAChD7H,EAASuH,MAEPhN,EAAW2E,EAAS3E,SAASqC,OAAS,EACpCsC,EAAS3E,SAAS,GAClB,eACNyF,EAASuE,YAAW,QAAS,CAAEC,OAAQjK,MAX3C,2CADqB,yDE9BbgM,WAAYA,Q,8DCnBZuB,GAAa/L,KAAb+L,SAEFC,GAAW,IAAIC,UACnB,gEASWC,GAAqB,WAChC,OACE,8BACE,cAAC,GAAD,OAKAC,GAAiB,WACrB,OACE,gCACE,cAAC,GAAD,IACA,cAAC,GAAD,QAKAC,GAAqB,SAAClN,GAAW,IAAD,EACJmG,mBAAwB,IADpB,oBAC7B7G,EAD6B,KACnB6N,EADmB,KAQpC,OANA5G,qBAAU,WACRuG,GAASM,iBAAiB,WAAW,SAACxG,GACpC,IAAIvE,EAAcgL,KAAKC,MAAM1G,EAAE1C,MAC/BiJ,GAAY,SAACI,GAAD,4BAAsBA,GAAtB,YAAuClL,YAEpD,IAED,qBAAKjD,UAAWC,KAAOmO,SAAvB,SACGlO,EAASiD,KAAI,SAACG,EAAG+K,GAAJ,OACZ,cAAC,GAAD,CAAqBvO,QAASwD,GAAhB+K,SAMhBxO,GAA8C,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACrD,OACE,gCACE,gCACE,cAAC,KAAD,CAAQwO,KAAM,GAAIlO,IAAKN,EAAQ2F,MAA/B,kBAGC3F,EAAQA,WAEX,8BAAMA,EAAQyO,WACd,2BAKAC,GAAiB,WAAO,IAAD,EACGzH,mBAAS,IADZ,oBACpBjH,EADoB,KACX2O,EADW,KAa3B,OACE,sBAAKzO,UAAWC,KAAO6C,SAAvB,UACE,cAAC2K,GAAD,CACEiB,KAAM,EACNnH,SAfW,SAACC,GAChBiH,EAAWjH,EAAEmC,OAAOvH,QAehBR,YAAY,qBACZQ,MAAOtC,IAET,8BACE,cAAC,KAAD,CAAQiC,KAAK,UAAU/B,UAAWC,KAAOY,OAAQC,QAjBnC,WACbhB,IAGL4N,GAASiB,KAAK7O,GACd2O,EAAW,MAYP,wB,UCvFKG,GAAsB,SAAErL,EAAYsL,EAAcC,EAAkBC,GAC/E,OAAOxL,EAAMJ,KAAI,SAAC6L,GAChB,OAAIA,EAAEF,KAAiBD,EACd,2BAAKG,GAAMD,GAEbC,MCIEC,GACD,WAA8F,IAA7FC,EAA4F,uDAAvE,EAAGC,EAAoE,uCAAlDC,EAAkD,uDAApC,GAAIC,EAAgC,uDAAT,KAC5F,OAAOjL,GACJQ,IAAkB,qBAAcsK,EAAd,kBAAkCC,EAAlC,iBAAmDC,IACxD,OAAXC,EAAkB,GAAlB,kBAAkCA,KAEpCjQ,MAAK,SAACyF,GAAD,OAAcA,EAASC,SANtBmK,GAQD,SAAC1O,GACT,OAAO6D,GACJwI,OADI,iBACarM,IACjBnB,MAAK,SAACyF,GAAD,OAAcA,EAASC,SAXtBmK,GAaH,SAAC1O,GACP,OAAO6D,GACJoG,KADI,iBACyBjK,IAC7BnB,MAAK,SAACyF,GAAD,OAAcA,EAASC,SCpB/BpB,GAAe,CACjB4L,MAAO,GACPH,SAAU,IACV1I,gBAAiB,MACjB8I,YAAa,EACbzC,YAAY,EACZ0C,oBAAqB,GACrB1J,OAAQ,CACNsJ,KAAM,GACNC,OAAQ,OAyDCzL,GACI,SAACe,GAAD,MAAqB,CAAE5C,KAAM,cAAe4C,WADhDf,GAEM,SAACe,GAAD,MACd,CAAE5C,KAAM,gBAAiB4C,WAHjBf,GAID,SAAC0L,GAAD,MACP,CAAEvN,KAAM,iBAAkBuN,UALlB1L,GAMA,SAACkC,GAAD,MACR,CAAE/D,KAAM,kBAAmBkL,QAASnH,IAP5BlC,GAQM,SAAC2L,GAAD,MACd,CAAExN,KAAM,wBAAyBwN,gBATzB3L,GAUS,SAAC6L,GAAD,MACjB,CAAE1N,KAAM,+BAAgC0N,eAXhC7L,GAYO,SAACkJ,GAAD,MACf,CAAE/K,KAAM,0BAA2B+K,eAb3BlJ,GAcG,SAACkJ,EAAqBvM,GAAtB,MACX,CAAEwB,KAAM,oCAAqC+K,aAAYvM,OAEjDmP,GAAa,SACxBC,EACAR,EACArJ,GAHwB,gDAIV,WAAOH,GAAP,gBAAAC,EAAA,6DACdD,EAAS/B,IAAyB,IAClC+B,EAAS/B,GAAwB+L,IACjChK,EAAS/B,GAAkBkC,IAHb,SAIOmJ,GACnBU,EACAR,EACArJ,EAAOsJ,KACPtJ,EAAOuJ,QARK,OAIVxK,EAJU,OAUdc,EAAS/B,GAAiBiB,EAAStB,QACnCoC,EAAS/B,GAA2BiB,EAAS4K,aAC7C9J,EAAS/B,IAAyB,IAZpB,2CAJU,uDAmCXgM,GAzGM,WAGG,IAFtB9L,EAEqB,uDAFbJ,GACRK,EACqB,uCACrB,OAAQA,EAAOhC,MACb,IAAK,cACH,OAAO,2BACF+B,GADL,IAEEwL,MAAOV,GAAoB9K,EAAMwL,MAAOvL,EAAOY,OAAQ,KAAM,CAC3DkL,UAAU,MAGhB,IAAK,gBACH,OAAO,2BACF/L,GADL,IAEEwL,MAAOV,GAAoB9K,EAAMwL,MAAOvL,EAAOY,OAAQ,KAAM,CAC3DkL,UAAU,MAGhB,IAAK,iBACH,OAAO,2BACF/L,GADL,IAEEwL,MAAM,YAAKvL,EAAOuL,SAEtB,IAAK,wBACH,OAAO,2BACFxL,GADL,IAEEyL,YAAaxL,EAAOwL,cAExB,IAAK,+BACH,OAAO,2BACFzL,GADL,IAEE2C,gBAAiB1C,EAAO0L,aAE5B,IAAK,0BACH,OAAO,2BACF3L,GADL,IAEEgJ,WAAY/I,EAAO+I,aAEvB,IAAK,kBACH,OAAO,2BAAKhJ,GAAZ,IAAmBgC,OAAQ/B,EAAOkJ,UACpC,IAAK,oCACH,OAAO,2BACFnJ,GADL,IAEE0L,oBAAqBzL,EAAO+I,WAAP,sBACbhJ,EAAM0L,qBADO,CACczL,EAAOxD,KACtCuD,EAAM0L,oBAAoB1J,QAAO,SAACvF,GAAD,OAAQA,IAAOwD,EAAOxD,QAE/D,QACE,OAAOuD,I,UChETJ,GAAe,CACjBoM,aAAa,GAiBFlM,GACY,iBAAO,CAAE7B,KAAM,wBAUzBgO,GAvBI,WAAkE,IAAjEjM,EAAgE,uDAAxDJ,GAAcK,EAA0C,uCAClF,OAAQA,EAAOhC,MACb,IAAK,sBACH,OAAO,2BACF+B,GADL,IAEEgM,aAAa,IAEjB,QACE,OAAOhM,ICPTkM,GAAeC,YAAgB,CACjC9L,YAAa0B,GACb3B,YAAaL,EACb2C,UAAWoJ,GACXvJ,KAAM+G,GACNzK,KAAMD,KACNwN,IAAKH,KAQDI,GAAmBC,OAAOC,sCAAwCrM,IAClEsM,GAAQC,YAAaP,GAAeG,GAAiBK,YAAgBC,QAE3EL,OAAOE,MAAQA,GACAA,U,mDCTAI,GAhBG,SAAC9P,GACjB,OACE,qBAAKZ,UAAWC,KAAO0Q,WAAvB,SACE,uBAAM9N,SAAUjC,EAAMiC,SAAUtC,GAAG,SAASP,UAAWC,KAAO2Q,OAA9D,UACE,uBACE5Q,UAAWC,KAAOuB,MAClBO,KAAK,OACLH,YAAY,YACZ2F,SAAU3G,EAAM2G,WAElB,wBAAQvH,UAAWC,KAAO4Q,IAA1B,wB,qBCEOC,GAZF,SAAClQ,GACZ,OACE,sBAAKZ,UAAWC,KAAO8Q,MAAvB,UACGnQ,EAAMoQ,KACP,wBACEhR,UAAWC,KAAOgR,MAClBnQ,QAAS,kBAAMF,EAAMsQ,SAAStQ,EAAMyN,c,qBCQ7B8C,GAdE,SAACvQ,GAChB,IAAMwQ,EAAWxQ,EAAMyQ,MAAMlO,KAAI,SAACmO,GAChC,OACE,cAAC,GAAD,CAEEN,KAAMM,EAAKN,KACX3C,MAAOiD,EAAK/Q,GACZ2Q,SAAUtQ,EAAMsQ,UAHXI,EAAK/Q,OAOhB,OAAO,qBAAKP,UAAWC,KAAOmR,SAAvB,SAAkCA,K,qBCD5BG,GAVO,SAAC3Q,GACrB,OACE,qBAAKZ,UAAWC,KAAOuR,OAAvB,SACE,oBAAIxR,UAAWC,KAAO6K,GAAtB,4BACelK,EAAM6Q,OADrB,YACgD,IAAjB7Q,EAAM6Q,OAAe,QAAU,eCoCrDC,G,4MAnCb5N,MAAQ,CACNuN,MAAO,CAAE,CAAEL,KAAM,yBAA0BzQ,GAAI,IAC/CiB,MAAO,I,EAETmQ,aAAe,SAACnK,GACd,EAAKoK,SAAS,CAAEpQ,MAAOgG,EAAEmC,OAAOvH,S,EAElCQ,aAAe,SAAC4E,GACd,IAAI8J,EACJ9J,EAAEqK,iBACuB,KAArB,EAAK/N,MAAMtC,QAGb8P,EAAO,CAAEN,KAAM,EAAKlN,MAAMtC,MAAOjB,GAAI,EAAKuD,MAAMuN,MAAM9O,OAAS,GAEjE,EAAKqP,SAAS,CAAEP,MAAM,GAAD,mBAAM,EAAKvN,MAAMuN,OAAjB,CAAwBC,IAAO9P,MAAO,KAC3DsQ,SAASC,eAAe,UAAUhI,U,EAEpCiI,aAAe,SAAC3D,GACd,IAAM4D,EAAe,EAAKnO,MAAMuN,MAAMvL,QAAO,SAACwL,GAC5C,OAAOA,EAAK/Q,KAAO8N,KAErB,EAAKuD,SAAS,CAAEP,MAAOY,K,4CAEzB,WACE,OACE,sBAAKjS,UAAWC,KAAOiS,SAAvB,UACE,cAAC,GAAD,CAAW3K,SAAUuE,KAAK6F,aAAc9O,SAAUiJ,KAAKlJ,eACvD,cAAC,GAAD,CAAUyO,MAAOvF,KAAKhI,MAAMuN,MAAOH,SAAUpF,KAAKkG,eAClD,cAAC,GAAD,CAAeP,OAAQ3F,KAAKhI,MAAMuN,MAAM9O,gB,GA9BvBwJ,a,8BCuCVoG,GAjCa,SAAC,GAAqD,IAAnD3I,EAAkD,EAAlDA,KAAMgG,EAA4C,EAA5CA,oBAAqB4C,EAAuB,EAAvBA,SAAUC,EAAa,EAAbA,OAC9DhN,EAASmE,EAAKnE,OAClB,OACE,sBAAKrF,UAAWC,KAAOuJ,KAAvB,UACE,iCACE,qBAAKxJ,UAAWC,KAAOqS,UAAvB,SACE,cAAC,IAAD,CAAS5R,GAAE,mBAAc8I,EAAKjJ,IAA9B,SACE,qBAAKP,UAAWC,KAAOsS,SAAUnS,IAAKoJ,EAAKF,OAAOkJ,OAASrS,GAAQE,IAAI,aAG3E,qBAAKL,UAAWC,KAAOY,OAAvB,SACG2I,EAAKqG,SACJ,wBAAQ4C,SAAUjD,EAAoBkD,MAAK,SAACnS,GAAD,OAAQA,IAAOiJ,EAAKjJ,MAC7DO,QAAS,WAAQsR,EAAS5I,EAAKjJ,KADjC,sBAKA,wBAAQkS,SAAUjD,EAAoBkD,MAAK,SAACnS,GAAD,OAAQA,IAAOiJ,EAAKjJ,MAC7DO,QAAS,WAAQuR,EAAO7I,EAAKjJ,KAD/B,yBAON,uBAAMP,UAAWC,KAAO0S,UAAxB,UACE,sBAAK3S,UAAWC,KAAO2S,UAAvB,mBAAyCpJ,EAAKhJ,QAC9C,qBAAKR,UAAWC,KAAO2S,UAAvB,SAAqCvN,EAAUA,EAAO9C,OAAS,GAAK8C,EAAOwN,OAAO,EAAG,IAAMxN,EAAU,cACrG,sBAAKrF,UAAWC,KAAO2S,UAAvB,mBAAyCpJ,EAAKjJ,a,oBCrCzCuS,GAAW,SAAChP,GAAD,OAAwBA,EAAM0C,UAAU8I,OAEnDyD,IADwBC,aAAeF,IAAU,SAACxD,GAAD,OAAWA,EAAMxJ,QAAO,SAACkJ,GAAD,OAAO,QAClE,SAAClL,GAAD,OAAwBA,EAAM0C,UAAU2I,WACtD8D,GAAqB,SAACnP,GAAD,OAAwBA,EAAM0C,UAAUC,iBAC7DyM,GAAiB,SAACpP,GAAD,OAAwBA,EAAM0C,UAAU+I,aACzD4D,GAAgB,SAACrP,GAAD,OAAwBA,EAAM0C,UAAUsG,YACxDsG,GAAyB,SAACtP,GAAD,OAAwBA,EAAM0C,UAAUgJ,qBACjE6D,GAAiB,SAACvP,GAAD,OAAwBA,EAAM0C,UAAUV,QCHhEwN,GAAmB,WAEvB,MADe,IA8CFC,GAnC8BvI,IAAMC,MAAK,SAACrK,GACvD,IAAMkF,EAASgB,YAAYuM,IAU3B,OACE,cAAC,KAAD,CACEG,oBAAoB,EACpB3J,cAAe,CAAEuF,KAAMtJ,EAAOsJ,KAAMC,OAAQoE,OAAO3N,EAAOuJ,SAC1DxN,SAAUyR,GACVzQ,SAdW,SAAEW,EAAF,GACT,IAD+BkQ,EAChC,EADgCA,cAE7B5N,EAAqB,CACzBsJ,KAAM5L,EAAO4L,KACbC,OAAyB,SAAjB7L,EAAO6L,OAAmB,KAAuB,SAAjB7L,EAAO6L,QAEjDzO,EAAM+S,gBAAgB7N,GACtB4N,GAAc,IAGd,SAMG,gBAAGE,EAAH,EAAGA,aAAH,OACC,eAAC,KAAD,CAAM5T,UAAWC,KAAO0C,KAAxB,UACE,cAAC,KAAD,CAAOZ,KAAK,OAAOvB,KAAK,SACxB,eAAC,KAAD,CAAOA,KAAK,SAASqT,GAAG,SAAxB,UACE,wBAAQzR,MAAM,OAAd,kBACA,wBAAQA,MAAM,OAAd,2BACA,wBAAQA,MAAM,QAAd,gCAEF,wBAAQL,KAAK,SAAS0Q,SAAUmB,EAAhC,2B,UC3BGE,GAAY,SAAClT,GACxB,IAAM6F,EAAkBK,YAAYmM,IAC9B1D,EAAczI,YAAYoM,IAC1B/D,EAAWrI,YAAYiM,IACvBjN,EAASgB,YAAYuM,IACrB/D,EAAQxI,YAAYgM,IACpBtD,EAAsB1I,YAAYsM,IAClCzN,EAAWwF,cAOX4I,EAAW,SAACxT,GAChBoF,EXiFkB,SAACpF,GAAD,gDAA2B,WAAOoF,GAAP,UAAAC,EAAA,6DAC/CD,EAAS/B,IAAqB,EAAMrD,IADW,SAE1B0O,GAAgB1O,GAFU,OAGnB,IAHmB,OAGlCyJ,YACXrE,EAAS/B,GAAsBrD,IAEjCoF,EAAS/B,IAAqB,EAAOrD,IANU,2CAA3B,sDWjFT8R,CAAO9R,KAEZyT,EAAa,SAACzT,GAClBoF,EXsEoB,SAACpF,GAAD,gDAA2B,WAAOoF,GAAP,UAAAC,EAAA,6DACjDD,EAAS/B,IAAqB,EAAMrD,IADa,SAE5B0O,GAAkB1O,GAFU,OAGrB,IAHqB,OAGpCyJ,YACXrE,EAAS/B,GAAwBrD,IAEnCoF,EAAS/B,IAAqB,EAAOrD,IANY,2CAA3B,sDWtEX6R,CAAS7R,KAEd0T,EAAUC,eAiChB,OA/BA/M,qBAAU,WACR,IAAMgN,EAASC,SACbH,EAAQI,SAASC,OAAOzB,OAAO,IAE7B0B,EAAahF,EACbiF,EAAe1O,EAInB,OAHMqO,EAAOxE,OAAM4E,EAAaE,OAAON,EAAOxE,OACxCwE,EAAO/E,OACXoF,EAAY,2BAAQA,GAAR,IAAsBpF,KAAM+E,EAAO/E,QACzC+E,EAAO9E,QACb,IAAK,OACHmF,EAAY,2BAAQA,GAAR,IAAsBnF,OAAQ,OAC1C,MACF,IAAK,OACHmF,EAAY,2BAAQA,GAAR,IAAsBnF,QAAQ,IAC1C,MACF,IAAK,QACHmF,EAAY,2BAAQA,GAAR,IAAsBnF,QAAQ,IAG9C1J,EAAS+J,GAAW6E,EAAYpF,EAAUqF,MAAiB,CAACP,EAAS9E,IACvEhI,qBAAU,WACR,IAAMuN,EAAqB,GACrB5O,EAAOsJ,OAAMsF,EAAMtF,KAAOtJ,EAAOsJ,MACjB,OAAlBtJ,EAAOuJ,SAAiBqF,EAAMrF,OAASoE,OAAO3N,EAAOuJ,SACrC,IAAhBE,IAAmBmF,EAAM/E,KAAO8D,OAAOlE,IAC3C0E,EAAQU,KAAK,CACXC,SAAU,cACVN,OAAQF,aAAsBM,OAE/B,CAAC5O,EAAQyJ,EAAa0E,IAEvB,gCACE,cAAC,GAAD,CAAiBN,gBA5CG,SAAC7N,GACvBH,EAAS+J,GAAW,EAAGP,EAAUrJ,OA4C/B,cAAC,KAAD,CAAY9F,UAAWC,KAAO4U,WAAYC,iBAAiB,EAAOC,eAAgB,EAAG5F,SAAU,IAAK6F,MAAOvO,EAAiBwO,QAAS1F,EAAahI,SAhDhI,SAAC2H,GACrBvJ,EAAS+J,GAAWR,EAAYC,EAAUrJ,OAgDxC,qBAAK9F,UAAWC,KAAOqP,MAAvB,SACGA,EAAMnM,KAAI,SAAC6L,GAAD,OACT,cAAC,GAAD,CAEExF,KAAMwF,EACNQ,oBAAqBA,EACrB6C,OAAQ0B,EACR3B,SAAU4B,GAJLhF,EAAEzO,aCvEL2U,GAAwC,SAACtU,GACrD,IAAMkM,EAAahG,YAAYqM,IAC/B,OACE,qCACGrG,EAAa,cAAC,GAAD,IAAgB,KAC9B,cAAC,GAAD,Q,kDCVOqI,GAAa,SAACrR,GAAD,OAAwBA,EAAMuC,KAAK2G,QAChDoI,GAAc,SAACtR,GAAD,OAAwBA,EAAMK,YAAYpE,gBACxDsV,GAAa,SAACvR,GAAD,OAAwBA,EAAMuC,KAAK0G,O,qBCMhDuI,GAAiC,WAC5C,IAAMtI,EAASlG,YAAYqO,IACrBpI,EAAQjG,YAAYuO,IACtBlV,EAAS2G,YAAYsO,IACnBzP,EAAWwF,cAITmK,EAAWC,KAAXD,OACR,OACE,cAACA,EAAD,CAAQtV,UAAU,SAAlB,SACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAKA,UAAU,aAAaL,KAAM,EAAG6V,OAAQ,EAA7C,SACE,cAAC,KAAD,CAAMC,MAAM,OAAOC,KAAK,aAAaC,oBAAqB,CAAC,KAA3D,SACE,cAAC,KAAKC,KAAN,UACE,cAAC,IAAD,CAAMlV,GAAG,cAAT,yBADa,SAKlBsM,EACC,qCACE,cAAC,IAAD,CAAKhN,UAAU,aAAaL,KAAM,EAAG6V,OAAQ,GAA7C,SACE,qBAAKpV,IAAKD,GAAU,GAAI0V,MAAM,OAAOxV,IAAK,aAE5C,cAAC,IAAD,CAAKL,UAAU,aAAaL,KAAM,EAAlC,SACE,eAAC,KAAD,CAAMoC,KAAK,UAAU+T,UAAQ,EAA7B,UAAgC/I,EAAhC,SAEF,cAAC,IAAD,CAAK/M,UAAU,aAAaL,KAAM,EAAlC,SACE,cAAC,KAAD,CAAQmB,QAvBG,WACrB6E,EpBwDkB,yCAAM,WAAOA,GAAP,UAAAC,EAAA,sEACL2G,KADK,cAEbvC,aAAe/H,EAAWsL,SACrC5H,EAAS/B,GAAwB,KAAM,KAAM,MAAM,IAH3B,2CAAN,wDoBlCR,0BAIJ,cAAC,IAAD,CAAK5D,UAAU,aAAaL,KAAM,EAAlC,SACE,cAAC,KAAD,UACE,cAAC,IAAD,CAAMe,GAAI,SAAV,6B,UC5BCqV,GAXQ,WACnB,IAAMC,EAAgBlP,YAAYP,IACpC,OACE,cAAC,IAAD,CAAK0P,OAAQ,GAAb,SACE,cAAC,IAAD,CAAKtW,KAAM,GAAX,SACE,cAAC,KAAD,CAAWuW,MAAM,eAAe9T,MAAO4T,SCWvCG,GAAYC,KAAZD,QACAE,GAA2Bd,KAA3Bc,QAASC,GAAkBf,KAAlBe,OAAQC,GAAUhB,KAAVgB,MACnBC,GAAOxL,IAAMyL,MAAK,kBAAM,iCACxBC,GAAQ1L,IAAMyL,MAAK,kBAAM,iCAOzBE,G,uKACJ,WACE7K,KAAKlL,MAAMgW,kB,oBAEb,WACE,OAAI9K,KAAKlL,MAAMkP,YACN,cAAC,GAAD,IAGP,eAAC,KAAD,WACE,cAAC,GAAD,IACA,cAACuG,GAAD,CAASjK,MAAO,CAAEyK,QAAS,UAA3B,SACE,eAAC,KAAD,CAAQ7W,UAAU,yBAAyBoM,MAAO,CAAEyK,QAAS,UAA7D,UACE,cAACN,GAAD,CAAOvW,UAAU,yBAAyB6V,MAAO,IAAjD,SACE,eAAC,KAAD,CAAMH,KAAK,SAASC,oBAAqB,CAAC,KAAMmB,gBAAiB,CAAC,QAAS1K,MAAO,CAAE2K,OAAQ,QAA5F,UACE,cAACZ,GAAD,CAAoBa,KAAM,cAACC,GAAA,EAAD,IAAkBf,MAAM,aAAlD,SACE,cAAC,KAAKN,KAAN,UACE,cAAC,IAAD,CAAMlV,GAAG,WAAT,sBADa,MADJ,QAMb,eAACyV,GAAD,CAAoBa,KAAM,cAACE,GAAA,EAAD,IAAoBhB,MAAM,aAApD,UACE,cAAC,KAAKN,KAAN,UACE,cAAC,IAAD,CAAMlV,GAAG,cAAT,2BADa,KAGf,cAAC,KAAKkV,KAAN,UACE,cAAC,IAAD,CAAMlV,GAAG,WAAT,yBADa,KAGf,cAAC,KAAKkV,KAAN,UACE,cAAC,IAAD,CAAMlV,GAAG,QAAT,oBADa,OAPJ,QAWb,eAACyV,GAAD,CAAoBa,KAAM,cAACG,GAAA,EAAD,IAA2BjB,MAAM,QAA3D,UACE,cAAC,KAAKN,KAAN,UACE,cAAC,IAAD,CAAMlV,GAAG,SAAT,oBADa,KAGf,cAAC,KAAKkV,KAAN,UACE,cAAC,IAAD,CAAMlV,GAAG,YAAT,6BADa,KAGf,cAAC,KAAKkV,KAAN,UACE,cAAC,IAAD,CAAMlV,GAAG,WAAT,uBADa,OAPJ,QAWb,cAAC,GAAD,SAGJ,cAAC2V,GAAD,CAASjK,MAAO,CAAEyK,QAAS,UAAWO,UAAW,KAAjD,SACE,eAAC,KAAD,WACE,cAAC,KAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,OAAQ,kBAAM,cAAC,KAAD,CAAU7W,GAAI,gBAClD,cAAC,KAAD,CAAO4W,KAAK,oBAAoBC,OAAQ,kBAAM,cAAC,GAAD,OAC9C,cAAC,KAAD,CAAOD,KAAK,WAAWC,OAAQ,kBAAM,cAACC,GAAD,OACrC,cAAC,KAAD,CAAOF,KAAK,QAAQC,OAAQjM,GAAakL,MACzC,cAAC,KAAD,CAAOc,KAAK,SAASC,OAAQjM,GAAaoL,MAC1C,cAAC,KAAD,CAAOY,KAAK,cAAcC,OAAQ,kBAAM,cAAC,GAAD,OACxC,cAAC,KAAD,CAAOD,KAAK,WAAWC,OAAQ,kBAAM,cAAC,EAAD,OACrC,cAAC,KAAD,CAAOD,KAAK,YAAYC,OAAQ,kBAAM,cAAC,GAAD,OACtC,cAAC,KAAD,CAAOD,KAAK,QAAQC,OAAQ,kBAAM,cAAC,GAAD,OAClC,cAAC,KAAD,CAAOD,KAAK,SAASC,OAAQ,kBAAM,cAAC,GAAD,OACnC,cAAC,KAAD,CAAOD,KAAK,IAAIC,OAAQ,kBAAM,cAAC,GAAD,OAC9B,cAAC,KAAD,CAAOD,KAAK,IAAIC,OAAQ,kBAAM,+DAKtC,cAACjB,GAAD,CAAQlK,MAAO,CAAEqL,UAAW,UAA5B,SACE,0DAAyB,mBAAGnL,KAAK,2DAAR,8B,GAjEjBtB,IAAMe,WA8EpB2L,GAAe1T,YACjBiI,KACAhI,aARoB,SAACH,GACrB,MAAO,CACLgM,YAAahM,EAAMoM,IAAIJ,eAMA,CAAE8G,cftFA,WAC3B,OAAO,SAACjR,GACN,IAAMgS,EAAUhS,EPSA,yCAAiB,WAAOA,GAAP,wBAAAC,EAAA,sEACd2G,KADc,OAEP,KADxB1H,EAD+B,QAEtBmF,aAAmB,EACHnF,EAASC,KAA9BvE,EADuB,EACvBA,GAAIwM,EADmB,EACnBA,MAAOP,EADY,EACZA,MACjB7G,EAAS/B,GAAwBrD,EAAIwM,EAAOP,GAAO,IACnD9H,GAAmBnE,GAAInB,MAAK,SAACyF,GAC3Bc,EAASiS,GAAoC/S,EAASyE,OAAOkJ,YAN9B,2CAAjB,uDORhBpI,QAAQyN,IAAI,CAACF,IAAUvY,MAAK,kBAAMuG,EAAS/B,WeiF5BI,CAGjB2S,IAcamB,GAZW,WACxB,OACE,cAAC,IAAD,UACE,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUzH,MAAOA,GAAjB,SACE,cAACoH,GAAD,W,OCjHVM,IAAST,OAAO,cAAC,GAAD,IAAazF,SAASC,eAAe,SAKrD9S,K,mBCVAF,EAAOC,QAAU,CAAC,KAAO,mBAAmB,KAAO,mBAAmB,IAAM,kBAAkB,KAAO,mBAAmB,MAAQ,uB","file":"static/js/main.a504a111.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialods_dialogs__3pw6b\",\"items\":\"Dialods_items__WRwPF\",\"textarea\":\"Dialods_textarea__2w4fZ\",\"messages\":\"Dialods_messages__1ADMc\",\"button\":\"Dialods_button__10I6w\",\"form\":\"Dialods_form__QiZ_p\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"img\":\"ProfileInfo_img__2eL49\",\"myPosts\":\"ProfileInfo_myPosts__1UIGQ\",\"enter\":\"ProfileInfo_enter__1XwGV\",\"textarea\":\"ProfileInfo_textarea__2XXNt\",\"button\":\"ProfileInfo_button__MGI7L\",\"form\":\"ProfileInfo_form__26yzR\",\"profile\":\"ProfileInfo_profile__2a9kK\",\"profile_img\":\"ProfileInfo_profile_img__25ivM\",\"profile_info\":\"ProfileInfo_profile_info__1UzzS\",\"profile_span\":\"ProfileInfo_profile_span__3Izk9\",\"profile_item\":\"ProfileInfo_profile_item__2MfbH\",\"button_status\":\"ProfileInfo_button_status__2jwgf\",\"status\":\"ProfileInfo_status__2pT48\",\"profile_addPhoto\":\"ProfileInfo_profile_addPhoto__3idU_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input_form\":\"InputForm_input_form__yQYti\",\"formik\":\"InputForm_formik__Ukx0D\",\"input\":\"InputForm_input__1jF-Z\",\"add\":\"InputForm_add__97EYJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formSummaryError\":\"Login_formSummaryError__2wO84\",\"login\":\"Login_login__DfaNc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"messages\":\"Message_messages__Ul6d5\",\"message\":\"Message_message__JnIoV\",\"avatar\":\"Message_avatar__tWJa9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__SnNcS\",\"error\":\"FormsControls_error__343Mq\",\"createField\":\"FormsControls_createField__1ZwrO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"ChatPage_button__YGw2p\",\"messeges\":\"ChatPage_messeges__-ikZj\",\"textarea\":\"ChatPage_textarea__3cH1X\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialog\":\"DialodItem_dialog__36i-m\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"h3\":\"MyPosts_h3__3w8UD\",\"post\":\"MyPosts_post__3BCuh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"to_do\":\"ToDo_to_do__oqVoe\",\"right\":\"ToDo_right__1Gmsd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"TaskIndicator_header__L-NHN\",\"add\":\"TaskIndicator_add__2Qc-K\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__3u1Pv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loader\":\"Preloader_loader__2JZ7Y\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"todolist\":\"MyToDoList_todolist__3PZ_g\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"toDoList\":\"ToDoList_toDoList__1ADLh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"users\":\"Users_users__3fDuq\",\"userPhoto\":\"Users_userPhoto__5Kx8K\",\"user_img\":\"Users_user_img__2YJLo\",\"user\":\"Users_user__1Aa3v\",\"button\":\"Users_button__oYryt\",\"user_info\":\"Users_user_info__2rOlW\",\"item_info\":\"Users_item_info__2DHjU\",\"selectedPage\":\"Users_selectedPage__2tLXu\",\"pagination\":\"Users_pagination__H3QEb\",\"form\":\"Users_form__jCFRV\"};","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import { Col, Row } from \"antd\";\r\nimport Title from \"antd/lib/typography/Title\";\r\nimport React from \"react\";\r\n\r\ntype PropsType = {};\r\n\r\nconst Setting: React.FC<PropsType> = () => {\r\n  return (\r\n    <Row>\r\n      <Col span={23} >\r\n      <Title level={3}>Setting</Title>\r\n        <p>This section is under construction.</p>\r\n      </Col>\r\n    </Row>\r\n  );\r\n};\r\n\r\nexport default Setting;\r\n","import React from \"react\";\r\nimport styles from \"./Message.module.css\";\r\n\r\ntype PropsType={\r\n  message: string\r\n  myProfilePhoto: string\r\n}\r\n\r\nconst Message: React.FC<PropsType> = ({ message, myProfilePhoto }) => {\r\n  return (\r\n    <div className={styles.messages}>\r\n      <div className={styles.message}>{message}</div>\r\n      <div className={styles.avatar}>\r\n        <img src={myProfilePhoto} alt=\"avatar\" />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Message;\r\n","import React from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport styles from \"./DialodItem.module.css\";\r\n\r\ntype PropsType={\r\n  id: number\r\n  name: string\r\n}\r\n\r\nconst DialodItem:React.FC<PropsType> = ({ id, name }) => {\r\n  return (\r\n    <div className={styles.dialog}>\r\n      <NavLink to={`/dialogs/${id}`} className={styles.dialog}>\r\n        {name}\r\n      </NavLink>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DialodItem;\r\n","import React from \"react\";\r\nimport styles from \"./Button.module.css\";\r\n\r\ntype PropsType={\r\n  onClick?: ()=> void\r\n  text: string\r\n}\r\nconst Button:React.FC<PropsType> = (props) => {\r\n  return (\r\n    <div>\r\n      <button className={styles.button} onClick={props.onClick}>{props.text}</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Button;\r\n","import React from \"react\";\r\nimport { Field, WrappedFieldMetaProps, WrappedFieldProps } from \"redux-form\";\r\nimport { FieldValidatorType } from \"../../helpers/validators/validators\";\r\nimport styles from \"./FormsControls.module.css\";\r\n\r\ntype FormControlProrsType = {\r\n  meta: WrappedFieldMetaProps;\r\n};\r\n\r\nconst FormControl:React.FC<FormControlProrsType>  = ({ meta: { touched, error }, children}) => {\r\n  const hasError = touched && error;\r\n  return (\r\n    <div className={`${styles.formControl} ${hasError ? styles.error : \"\"}`}>\r\n      <div>{children}</div>\r\n      {hasError && <span>{error}</span>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport const Textarea: React.FC<WrappedFieldProps> = (props) => {\r\n  const { input, meta,  ...restProps } = props;\r\n  return (\r\n    <FormControl {...props}>\r\n      <textarea {...input} {...restProps} />\r\n    </FormControl>\r\n  ); \r\n};\r\n\r\nexport const Input: React.FC<WrappedFieldProps>  = (props) => {\r\n  const { input, meta,  ...restProps } = props;\r\n  return (\r\n    <FormControl {...props}>\r\n      <input {...input} {...restProps} />\r\n    </FormControl>\r\n  );\r\n};\r\n\r\nexport function createField<FormkeysType extends string>( placeholder: string  | undefined, name: FormkeysType ,\r\n   validate: Array<FieldValidatorType>, component:  React.FC<WrappedFieldProps>, type = \"\" ,props={}) {\r\n  return (\r\n    <div className={styles.createField}>\r\n      <Field\r\n        placeholder={placeholder}\r\n        name={name}\r\n        validate={validate}\r\n        component={component}\r\n        type={type}       \r\n        {...props}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport type GetStringKeys<T> = Extract<keyof T, string>","export type FieldValidatorType = (value: string) => string | undefined;\r\n\r\nexport const reaquired: FieldValidatorType = (value) => {\r\n  if (value) return undefined;\r\n  return \"Field is requred\";\r\n};\r\n\r\nexport const maxLengthCreater = (maxLength: number): FieldValidatorType => (value) => {\r\n  if (value.length > maxLength) return `Max length is ${maxLength} symbol`;\r\n  return undefined;\r\n};\r\n","import axios from \"axios\";\r\nimport {  userType } from \"../types/types\";\r\n\r\nexport const instanse = axios.create({\r\n  withCredentials: true,\r\n  headers: {\r\n    \"API-KEY\": \"bac7d47b-efec-4715-8bfd-5f98ebf82dcf\",\r\n  },\r\n  baseURL: \"https://social-network.samuraijs.com/api/1.0/\",\r\n});\r\n\r\nexport type GetItemsType = {\r\n  items: Array<userType>;\r\n  totalCount: number;\r\n  error: string | null;\r\n};\r\n\r\nexport type ResponseType<D = {}, RC = ResultCode> = {\r\n  data: D;\r\n  messages: Array<string>;\r\n  resultCode: RC;\r\n};\r\n\r\n// export const usersAPI = {\r\n//   getUsers: (pageNumber:number = 1, pageSize: number) => {\r\n//     return instanse\r\n//       .get<GetUsersResponseType>(`users?page=${pageNumber}&count=${pageSize}`)\r\n//       .then((response) => response.data);\r\n//   },\r\n//   unfollow: (id: number) => {\r\n//     return instanse.delete<FollowUnfollowResponseType>(`follow/${id}`).then((response) => response.data);\r\n//   },\r\n//   follow: (id: number) => {\r\n//     return instanse.post<FollowUnfollowResponseType>(`follow/${id}`).then((response) => response.data);\r\n//   },\r\n//   getUser: (userId: number) => {\r\n//     return instanse.get<profileType>(`profile/${userId}`).then((response) => response.data);\r\n//   },\r\n// };\r\n\r\nexport enum ResultCode {\r\n  Success = 0,\r\n  error = 1,\r\n}\r\nexport enum ResultCodeWithCaptcha {\r\n  CaptchaIsRequired = 10,\r\n}\r\nexport type MeResponseType = {\r\n  data: { id: number; email: string; login: string };\r\n  resultCode: ResultCode;\r\n  messagers: Array<string>;\r\n};\r\n\r\nexport type LoginResponseType = {\r\n  data: { userId: number };\r\n  resultCode: ResultCode | ResultCodeWithCaptcha;\r\n  messages: Array<string>;\r\n};\r\nexport type LoginoutResponseType = {\r\n  resultCode: ResultCode;\r\n  messages: Array<string>;\r\n  data: {};\r\n};\r\n// export const authAPI = {\r\n//   login: ( email: string, password: string, rememberMe = false, captcha: null | string = null ) =>\r\n//     instanse.post<LoginResponseType>(`auth/login`, { email, password, rememberMe, captcha })\r\n//       .then((response) => response.data),\r\n//   logout: () => instanse.delete<LoginoutResponseType>(`auth/login`).then((response) => response.data),\r\n//   me: () => instanse.get<MeResponseType>(`auth/me`).then((response) => response.data),\r\n// };\r\n\r\n\r\n// export const securityAPI = {\r\n//   getCaptchaUrl: () => instanse.get<GetCaptchaUrlType>(`security/get-captcha-url`).then((response) => response),\r\n// };\r\n\r\n// export const profileAPI = {\r\n//   getStatus: (userId: number) =>\r\n//     instanse.get(`/profile/status/${userId}`).then((response) => response.data),\r\n//   savePhoto: (file: any) => {\r\n//     const formData = new FormData();\r\n//     formData.append(\"image\", file);\r\n//     return instanse\r\n//       .put(`/profile/photo`, formData, {\r\n//         headers: { \"Content-Type\": \"multipart/form-data\" },\r\n//       })\r\n//       .then((response) => response.data);\r\n//   },\r\n//   saveProfile: (profile: profileType) => {\r\n//     return instanse.put(`/profile`, profile).then((response) => response.data);\r\n//   },\r\n//   updateStatus: (status: string) =>\r\n//     instanse\r\n//       .put(`/profile/status`, { status: status })\r\n//       .then((response) => response),\r\n// };\r\n","import React from \"react\";\r\nimport styles from \"./Dialods.module.css\";\r\nimport Message from \"./Message/Message\";\r\nimport DialodItem from \"./DialodItem/DialodItem\";\r\nimport Button from \"../../common/Button/Button\";\r\nimport { InjectedFormProps, reduxForm } from \"redux-form\";\r\nimport { createField, Textarea } from \"../../common/FormsControls/FormsControls\";\r\nimport { DialogType, MessagesType } from \"../../types/types\";\r\nimport { maxLengthCreater, reaquired } from \"../../helpers/validators/validators\";\r\n\r\ntype OwnProps = {\r\n  dialogs: Array<DialogType>;\r\n  messages: Array<MessagesType>;\r\n  myProfilePhoto: string;\r\n  newMessages: (newMessageText: string) => void;\r\n \r\n};\r\n\r\nconst Dialods: React.FC<OwnProps>  = ({ dialogs, messages, myProfilePhoto, newMessages }) => {\r\n  let DialogElemenst = dialogs.map((d) => (<DialodItem name={d.name} key={d.id} id={d.id} />));\r\n  let messagesElemenst = messages.map((m) => (<Message message={m.message} key={m.id} myProfilePhoto={myProfilePhoto} />));\r\n  return (\r\n    <div className={styles.dialogs}>\r\n      <div className={styles.items}>{DialogElemenst}</div>\r\n      <div className={styles.messages}>{messagesElemenst}</div>\r\n      <AddMessegeFormRedux\r\n        onSubmit={(values: {newMessageText: string}) => {\r\n          newMessages(values.newMessageText)\r\n          values.newMessageText = \"\"\r\n        }\r\n        }\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport type AddMessegeType = {\r\n  newMessageText: string; \r\n};\r\nconst maxLength100 = maxLengthCreater(10);\r\nexport type AddMessegeTypeKeys = keyof AddMessegeType\r\ntype PropsType ={}\r\nconst AddMessegeForm: React.FC< InjectedFormProps<AddMessegeType, PropsType> & PropsType> = ({ handleSubmit }) => {\r\n  return (\r\n    <form onSubmit={handleSubmit} className={styles.textarea }>\r\n      <div>\r\n        {createField<AddMessegeTypeKeys>(\"enter message\",\"newMessageText\",[reaquired, maxLength100],Textarea )}\r\n        <div className={styles.button}>\r\n          <Button text={\"Send\"} />\r\n        </div>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nconst AddMessegeFormRedux = reduxForm<AddMessegeType, PropsType> ({ form: \"dialogAddMessegeForm\" })( AddMessegeForm );\r\n\r\nexport default Dialods;\r\n","import { DialogType, MessagesType } from './../types/types';\r\nimport { reset } from \"redux-form\";\r\nimport { InferActionTypes } from \"./redux-store\";\r\n\r\nlet initialState = {\r\n  dialogs: [\r\n    { id: 1, name: \"Dima\", active: \"active\" },\r\n    { id: 2, name: \"Alina\", active: \" \" },\r\n    { id: 3, name: \"Ninja\", active: \" \" },\r\n    { id: 4, name: \"Spider-man\", active: \" \" },\r\n  ] as Array<DialogType>,\r\n  messages: [\r\n    { id: 1, message: \"hello!!\" },\r\n    { id: 2, message: \"How are you?\" },\r\n    { id: 3, message: \"yoyo\" },\r\n    { id: 4, message: \"hello man) \" },\r\n  ] as Array<MessagesType>,\r\n};\r\n\r\nconst dialodsReducer = (state = initialState, action: ActionsType ) => {\r\n  switch (action.type) {\r\n    case \"dialog/SEND_MESSAGE\":\r\n      return {\r\n        ...state,\r\n        messages: [\r\n          ...state.messages,\r\n          { id: state.messages.length + 2, message: action.message },\r\n        ],\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const actions= {\r\n  newMessage :(message: string) => ({ type: \"dialog/SEND_MESSAGE\", message } as const ),\r\n}\r\n\r\nexport const newMessages = (message: string) => {\r\n  return (dispatch: any) => {\r\n    dispatch(actions.newMessage(message));\r\n    dispatch(reset(\"dialogAddMessegeForm\"));\r\n  };\r\n};\r\n\r\nexport default dialodsReducer;\r\n\r\nexport type initialStateType = typeof initialState;\r\ntype ActionsType = InferActionTypes<typeof actions>","import Dialods from \"./Dialods\";\r\nimport { actions } from \"../../redux/dialogs-reduser\";\r\nimport { connect } from \"react-redux\";\r\nimport { compose } from \"redux\";\r\nimport { AppStateType } from \"../../redux/redux-store\";\r\n\r\nlet mapStateToPtops = (state:AppStateType) => {\r\n  return {\r\n    dialogs: state.dialogsPage.dialogs,\r\n    messages: state.dialogsPage.messages,\r\n    myProfilePhoto: state.profilePage.myProfilePhoto,\r\n  };\r\n};\r\n\r\nconst newMessages = actions.newMessage\r\n\r\nexport default compose<React.ComponentType>(connect(mapStateToPtops, {newMessages}))(Dialods);\r\n","import { photosType, profileType } from \"../types/types\";\r\nimport { instanse, ResponseType } from \"./api\";\r\n\r\ntype SavePhotoResponceDataType = {\r\n  photos: photosType\r\n}\r\n\r\nexport const profileAPI = {\r\n  getStatus: (userId: number) =>\r\n    instanse.get<string>(`/profile/status/${userId}`).then((response) => response.data),\r\n  savePhoto: (file: File) => {\r\n    const formData = new FormData();\r\n    formData.append(\"image\", file);\r\n    return instanse\r\n      .put(`/profile/photo`, formData, {\r\n        headers: { \"Content-Type\": \"multipart/form-data\" },\r\n      })\r\n      .then((response) => response.data);\r\n  },\r\n  saveProfile: (profile: profileType) => {\r\n    return instanse.put<ResponseType<SavePhotoResponceDataType>>(`/profile`, profile).then((response) => response.data);\r\n  },\r\n  updateStatus: (status: string) => {\r\n    instanse\r\n      .put(`/profile/status`, { status: status })\r\n      .then((response) => response.data);\r\n  },\r\n  getUser: (userId: number) => {\r\n    return instanse\r\n      .get<profileType>(`profile/${userId}`)\r\n      .then((response) => response.data);\r\n  },\r\n};\r\n","import { FormAction,reset, stopSubmit } from \"redux-form\";\r\nimport { profileAPI } from \"../API/ProfileAPI\";\r\nimport { postsType, profileType } from \"../types/types\";\r\nimport { BaseThunkType, InferActionTypes } from \"./redux-store\";\r\n\r\nlet initialState = {\r\n  posts: [\r\n    { id: 1, message: \"Hi, how are you?\", like: 1 },\r\n    { id: 2, message: \"Hi!!\", like: 55 },\r\n    { id: 3, message: \"I know it...\", like: 144 },\r\n    { id: 4, message: \"Have a good day\", like: 15 },\r\n    { id: 5, message: \"It's my first post!!\", like: 177 },\r\n  ] as Array<postsType>,\r\n  profile: null as profileType | null,\r\n  myProfilePhoto: null as null | string,\r\n  status: \" \" as string,\r\n};\r\n\r\nconst profileReducer = ( state = initialState, action: ActionsType): initialStateType => {\r\n  switch (action.type) {\r\n    case \"profile/ADD_POST\":\r\n      return {\r\n        ...state,\r\n        posts: [\r\n          ...state.posts,\r\n          { id: state.posts.length + 1, message: action.newPost, like: 0 },\r\n        ],\r\n      };\r\n    case \"profile/SET_USER_PROFILE\": {\r\n      return { ...state, profile: action.profile };\r\n    }\r\n    case \"profile/SET_MY_PROFILE_PHOTO\": {\r\n      return { ...state, myProfilePhoto: action.profile };\r\n    }\r\n    case \"profile/SET_STATUS\": {\r\n      return { ...state, status: action.status };\r\n    }\r\n    case \"profile/DELETE_POST\":\r\n      return {\r\n        ...state,\r\n        posts: state.posts.filter((p) => p.id !== action.postId),\r\n      };\r\n    case \"profile/SET_PHOTO\":\r\n      return {\r\n        ...state,\r\n        myProfilePhoto: action.photo,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const actions= {\r\n  addPost: (newPost: string) => ({ type: \"profile/ADD_POST\", newPost } as const),\r\n  deletePost: (postId: number) => ({ type: \"profile/DELETE_POST\", postId } as const),\r\n  setUserProfile: (profile: profileType) => ({ type: \"profile/SET_USER_PROFILE\", profile} as const),\r\n  setMyProfile: (profile: string) => ({ type: \"profile/SET_MY_PROFILE_PHOTO\",  profile } as const),\r\n  setStatus: (status: string) => ({ type: \"profile/SET_STATUS\", status } as const),\r\n  setPhotoSuccses: (photo: string)  => ({ type: \"profile/SET_PHOTO\", photo } as const),\r\n}\r\n\r\nexport const getUser = (userId: number): ThunkType => async (dispatch) => {\r\n  let response = await profileAPI.getUser(userId);\r\n  dispatch(actions.setUserProfile(response));\r\n};\r\nexport const getStatus = (userId: number):ThunkType => async (dispatch) => {\r\n  let response = await profileAPI.getStatus(userId);\r\n  dispatch(actions.setStatus(response));\r\n};\r\nexport const updateStatus = (status: string):ThunkType => async (dispatch) => {\r\n    profileAPI.updateStatus(status);  \r\n    dispatch(actions.setStatus(status));   \r\n};\r\nexport const addPosts = (newPost: string):ThunkType => async (dispatch) => {\r\n    dispatch(actions.addPost(newPost));\r\n    dispatch(reset(\"newPostText\"));\r\n};\r\nexport const savePhoto = (file: File):ThunkType   => async (dispatch) => {\r\n  let response = await profileAPI.savePhoto(file);\r\n  if (response.resultCode === 0) {\r\n    dispatch(actions.setPhotoSuccses(response.data.photos.large));\r\n  }\r\n};\r\nexport const saveProfile = (profile: profileType):ThunkType  => async (dispatch,  getState: any) => {  \r\n  const userId = getState().auth.userId;\r\n  const response = await profileAPI.saveProfile(profile);\r\n  if (response.resultCode === 0) {\r\n    dispatch(getUser(userId));\r\n  } else {\r\n    dispatch(stopSubmit(\"editProfile\", { _error: response.messages[0] }));\r\n    return Promise.reject(response.messages[0]);\r\n  }\r\n};\r\n\r\nexport default profileReducer;\r\n\r\nexport type initialStateType = typeof initialState;\r\ntype ActionsType = InferActionTypes<typeof actions>\r\ntype ThunkType = BaseThunkType<ActionsType | FormAction>","export default __webpack_public_path__ + \"static/media/loader.932ba854.svg\";","import React from \"react\";\r\nimport styles from \"./Preloader.module.css\";\r\nimport loader from \"./../../img/loader.svg\";\r\n\r\ntype PropsType={}\r\n\r\nconst Preloader:React.FC<PropsType> = () => {\r\n  return (\r\n    <div className={styles.loader}>\r\n      <img src={loader} alt={\"loader\"}/>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Preloader;\r\n","export const getProfile = (state) => state.profilePage.profile;\r\nexport const getUserId = (state) => state.auth.userId;\r\nexport const selectStatus = (state) => state.profilePage.status\r\nexport const selectTotalItemsCount = (state) => state.usersPage.totalUsersCount","import React, { ChangeEvent, useEffect, useState } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { selectStatus } from \"../../../../redux/profile-selector\";\r\nimport styles from \"./ProfileInfo.module.css\";\r\n\r\ntype PropsType ={\r\n  getStatus: (userId:number)=> void\r\n  userId: number\r\n  status: string\r\n  updateStatus: (status:string)=> void\r\n}\r\nconst ProfileStatusWithHooks:React.FC<PropsType> = ({getStatus,userId,updateStatus}) => {\r\n  getStatus(userId);\r\n  const statusToRedux = useSelector(selectStatus)    \r\n  let [editMode, setEditMode] = useState(false);\r\n  let [status, setStatus] = useState(statusToRedux);\r\n  useEffect(() => { setStatus(statusToRedux) }, [statusToRedux]); \r\n  const activateMode = () => setEditMode(true);\r\n  const deactivateMode = () => { setEditMode(false);\r\n    updateStatus(status);\r\n  };\r\n  const onStatusChenge = (e: ChangeEvent<HTMLInputElement> ) => setStatus(e.currentTarget.value);\r\n  return (\r\n    <div  className={styles.status}>\r\n      {!editMode && (\r\n        <div className={styles.status}>\r\n          <span className={styles.profile_span}>\r\n            Status: {status || \"no status\"}\r\n          </span>\r\n          <button onClick={activateMode} className={styles.button_status}>\r\n            update status\r\n          </button>\r\n        </div>\r\n      )}\r\n      {editMode && (\r\n        <div className={styles.status}>\r\n          <input autoFocus={true} value={status} onChange={onStatusChenge} />\r\n          <button className={styles.button_status} onClick={deactivateMode}>\r\n            save\r\n          </button>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProfileStatusWithHooks;","export default __webpack_public_path__ + \"static/media/user-male.3759889a.png\";","import React from \"react\";\r\nimport styles from \"./ProfileInfo.module.css\";\r\nimport { InjectedFormProps, reduxForm } from \"redux-form\";\r\nimport {\r\n  reaquired,\r\n  maxLengthCreater,\r\n} from \"../../../../helpers/validators/validators\";\r\nimport {\r\n  createField,\r\n  GetStringKeys,\r\n  Textarea,\r\n} from \"../../../../common/FormsControls/FormsControls\";\r\n\r\ntype PropsType = {};\r\nexport type AddNewPostFormType = {\r\n  newPostText: string;\r\n  addPosts: () => void;\r\n};\r\n\r\ntype AddNewPostFormTypeKeys = GetStringKeys<AddNewPostFormType>;\r\n\r\nconst maxLength10 = maxLengthCreater(10);\r\nconst AddNewPost: React.FC<\r\n  InjectedFormProps<AddNewPostFormType, PropsType> & PropsType\r\n> = ({ handleSubmit }) => {\r\n  return (\r\n    <form onSubmit={handleSubmit} className={styles.enter}>\r\n      <div>\r\n        <div className={styles.textarea}>\r\n          {createField<AddNewPostFormTypeKeys>(\r\n            \"enter post\",\r\n            \"newPostText\",\r\n            [reaquired, maxLength10],\r\n            Textarea\r\n          )}\r\n        </div>\r\n        <div className={styles.button}>\r\n          <button>add post</button>\r\n        </div>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nconst AddNewPostRedux = reduxForm<AddNewPostFormType, PropsType>({\r\n  form: \"newPostText\",\r\n})(AddNewPost);\r\nexport default AddNewPostRedux;\r\n","import React from \"react\";\r\nimport { contactsType, profileType } from \"../../../../types/types\";\r\nimport styles from \"./ProfileInfo.module.css\";\r\n\r\ntype PropsType = {\r\n  profile: profileType\r\n  isOwner: boolean\r\n  goToEditMode: ()=> void\r\n}\r\n\r\nconst ProfileData: React.FC<PropsType> = ({ profile, isOwner, goToEditMode }) => {\r\n  return (\r\n    <div className={styles.profile_info}>\r\n      <div className={styles.profile_item}>\r\n        <span className={styles.profile_span}>Full mame:</span>\r\n        {profile.fullName}\r\n      </div>\r\n      <div className={styles.profile_item}>\r\n        <span className={styles.profile_span}>id: </span>\r\n        {profile.userId}\r\n      </div>\r\n      <div className={styles.profile_item}>\r\n        <span className={styles.profile_span}>About me: </span>\r\n        {profile.aboutMe}\r\n      </div>\r\n      <div className={styles.profile_item}>\r\n        <span className={styles.profile_span}>Look for a job: </span>\r\n        {profile.lookingForAJob ? \"yes\" : \"no\"}\r\n      </div>\r\n      {profile.lookingForAJob && (\r\n        <div className={styles.profile_item}>\r\n          <span className={styles.profile_span}>My professional skills:</span>\r\n          {profile.lookingForAJobDescription}\r\n        </div>\r\n      )}\r\n      <div className={styles.profile_item}>\r\n        <span className={styles.profile_span}>Contact: </span>\r\n        {Object.keys(profile.contacts).map((key) => {\r\n          return (\r\n            <Contact key={key} contactTitle={key} contactValue={profile.contacts[key as keyof contactsType]} />\r\n          );\r\n        })}\r\n      </div>\r\n      <div>\r\n        {isOwner && (\r\n          <div>\r\n            <button onClick={goToEditMode}>edit</button>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\ntype PropsContactType = {\r\n  contactTitle: string\r\n  contactValue: string | null\r\n}\r\nexport const Contact: React.FC<PropsContactType> = ({ contactTitle, contactValue }) => {\r\n  return (\r\n    <div>\r\n      <span className={styles.profile_span}> {contactTitle}</span>:\r\n      {contactValue}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProfileData;\r\n","import React from \"react\";\r\nimport { InjectedFormProps, reduxForm } from \"redux-form\";\r\nimport {\r\n  createField,\r\n  GetStringKeys,\r\n  Input,\r\n  Textarea,\r\n} from \"../../../../common/FormsControls/FormsControls\";\r\nimport { profileType } from \"../../../../types/types\";\r\nimport styles from \"./ProfileInfo.module.css\";\r\n\r\ntype PropsType = {\r\n  isOwner: boolean;\r\n  profile: profileType;\r\n};\r\ntype PropsTypeKeys = GetStringKeys<profileType>;\r\n\r\nconst ProfileDataForm: React.FC<\r\n  InjectedFormProps<profileType, PropsType> & PropsType> = ({ handleSubmit, profile, isOwner, error }) => {\r\n  console.log(\"profile\");\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      {isOwner && (\r\n        <form className={styles.profile_info}>\r\n          <div className={styles.profile_item}>\r\n            <span className={styles.profile_span}>\r\n              Full name:{\" \"}\r\n              {createField<PropsTypeKeys>(\"Full mame\", \"fullName\", [], Input)}\r\n            </span>\r\n          </div>\r\n          <div className={styles.profile_item}>\r\n            <span className={styles.profile_span}>\r\n              Look for a job:\r\n              {createField<PropsTypeKeys>(\r\n                \"\",\r\n                \"lookingForAJob\",\r\n                [],\r\n                Input,\r\n                \"checkbox\"\r\n              )}\r\n            </span>\r\n          </div>\r\n          <div className={styles.profile_item}>\r\n            <span className={styles.profile_span}>My professional skills:</span>\r\n            {createField<PropsTypeKeys>(\r\n              \"enter your skill\",\r\n              \"lookingForAJobDescription\",\r\n              [],\r\n              Textarea,\r\n              \"\"\r\n            )}\r\n          </div>\r\n          <div className={styles.profile_item}>\r\n            <span className={styles.profile_span}>About me:</span>\r\n            {createField<PropsTypeKeys>(\r\n              \"enter about me\",\r\n              \"aboutMe\",\r\n              [],\r\n              Textarea,\r\n              \"\"\r\n            )}\r\n          </div>\r\n          <div className={styles.profile_item}>\r\n            <span className={styles.profile_span}>Contact: </span>\r\n            {Object.keys(profile.contacts).map((key) => {\r\n              console.log(key);\r\n              return (\r\n                <div key={key}>\r\n                  <b>{key}</b>:{\" \"}\r\n                  {createField(key, `contacts.${key}`, [], Textarea, \"\")}\r\n                </div>\r\n              );\r\n            })}\r\n          </div>\r\n        </form>\r\n      )}\r\n      <div>\r\n        {error && <div>{error}</div>}\r\n        {isOwner && (\r\n          <div>\r\n            <button>save</button>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nconst ProfileDataFormReduxForm = reduxForm<profileType, PropsType>({\r\n  form: \"editProfile\",\r\n})(ProfileDataForm);\r\n\r\nexport default ProfileDataFormReduxForm;\r\n","import { ChangeEvent, useState } from \"react\";\r\nimport styles from \"./ProfileInfo.module.css\";\r\nimport Preloader from \"../../../../common/Preloader/Preloader\";\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\r\nimport user from \"./../../../../img/user-male.png\";\r\nimport AddNewPostRedux, { AddNewPostFormType } from \"./AddNewPost\";\r\nimport ProfileData from \"./ProfileData\";\r\nimport ProfileDataFormReduxForm from \"./ProfileDataForm\";\r\nimport { profileType } from \"../../../../types/types\";\r\n\r\ntype PropsType = {\r\n  profile: profileType\r\n  status: string\r\n  getStatus: (userId:number) => void,\r\n  myId: number\r\n  updateStatus: (status: string) => void\r\n  addPosts: (message: string) => void\r\n  isOwner: boolean\r\n  savePhoto: (file: any) => void\r\n  saveProfile: (profile: profileType) => Promise<any>\r\n  }\r\n\r\nconst ProfileInfo: React.FC<PropsType> = ({ profile, status, getStatus, myId, updateStatus, addPosts, isOwner, savePhoto, saveProfile }) => {\r\n  let [editMode, setEditMode] = useState(false);\r\n  if (!profile) {\r\n    return <Preloader />;\r\n  }\r\n  const onMailPhotoSelect = (e: ChangeEvent<HTMLInputElement>) => {    \r\n    if (e.target.files && e.target.files.length) {\r\n      savePhoto(e.target.files[0])\r\n    }\r\n  };\r\n  const onSubmit = (formData: profileType) => {\r\n    //todo \r\n    saveProfile(formData).then(() => {setEditMode(false)});\r\n  };\r\n  \r\n  return (\r\n    <div className={styles.myPosts}>\r\n      <div className={styles.profile}>\r\n        <img src={profile.photos.large || user} className={styles.profile_img} alt={\"photos\"} />\r\n        {isOwner && (\r\n          <div className={styles.profile_addPhoto}>\r\n            <input type={\"file\"} onChange={onMailPhotoSelect} />              \r\n          </div>\r\n        )}\r\n        {isOwner && ( <ProfileStatusWithHooks status={status}\r\n            getStatus={getStatus} userId={profile.userId} updateStatus={updateStatus}\r\n          />\r\n        )}\r\n        {editMode ? ( <ProfileDataFormReduxForm isOwner={isOwner} initialValues={profile} profile={profile} onSubmit={onSubmit} />\r\n        ) : (<ProfileData profile={profile} isOwner={isOwner} goToEditMode={() => setEditMode(true)} /> )}\r\n        <AddNewPostRedux onSubmit={(value:AddNewPostFormType) => addPosts(value.newPostText)} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProfileInfo;\r\n","import { connect } from \"react-redux\";\r\nimport { addPosts, getStatus, updateStatus, savePhoto, saveProfile } from \"../../../../redux/profile-reduser\";\r\nimport { AppStateType } from \"../../../../redux/redux-store\";\r\nimport ProfileInfo from \"./ProfileInfo\";\r\n\r\nlet mapStateToPtops = (state: AppStateType) => {\r\n  return {    \r\n    status: state.profilePage.status,\r\n    myId: state.auth.userId,\r\n  } as MapStatePropsType\r\n};\r\ntype MapStatePropsType ={\r\n  status: string\r\n  myId: number\r\n}\r\n\r\nexport default connect<MapStatePropsType, {}, {}, AppStateType>(mapStateToPtops, { addPosts, getStatus, updateStatus, savePhoto, saveProfile })( ProfileInfo );\r\n","export default __webpack_public_path__ + \"static/media/like.66cbaf98.png\";","import React from \"react\";\r\nimport styles from \"./Post.module.css\";\r\nimport likes from \"./../../../../img/like.png\";\r\nimport user from \"./../../../../img/user-male.png\";\r\n\r\ntype PropsType ={\r\n  myProfilePhoto: string\r\n  messege: string\r\n  like: number\r\n}\r\n\r\nconst Post:React.FC<PropsType> = ({ myProfilePhoto, messege, like }) => {\r\n  return (\r\n    <div className={styles.posts}>\r\n      <div className={styles.post}>\r\n        <img src={myProfilePhoto || user} alt=\"\" className={styles.img} />\r\n        <span className={styles.text}>{messege}</span>\r\n        <div className={styles.likes}>\r\n          <img src={likes} alt=\"\" className={styles.like} />\r\n          <span> {like}</span>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Post;\r\n","import React from \"react\";\r\nimport Post from \"./Post/Post\";\r\nimport styles from \"./MyPosts.module.css\";\r\nimport { postsType } from \"../../../types/types\";\r\n\r\ntype PropsType = {\r\n  posts: Array<postsType>\r\n  myProfilePhoto: string\r\n\r\n}\r\nconst MyPosts:React.FC<PropsType> = (props) => {\r\n  let postElemenst = [...props.posts].reverse().map((p) => (<Post\r\n        messege={p.message} like={p.like} key={p.id} myProfilePhoto={props.myProfilePhoto} /> ));\r\n  return (\r\n    <div className={styles.post}>\r\n      <h3 className={styles.h3}>My posts:</h3>\r\n      {postElemenst}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst MyPostsMemorized = React.memo(MyPosts)\r\nexport default MyPostsMemorized;\r\n","import { connect } from \"react-redux\";\r\nimport { AppStateType } from \"../../../redux/redux-store\";\r\nimport { postsType } from \"../../../types/types\";\r\nimport MyPosts from \"./MyPosts\";\r\n\r\nlet mapStateToPtops = (state:AppStateType) => {\r\n  return {\r\n    posts: state.profilePage.posts,\r\n    myProfilePhoto: state.profilePage.myProfilePhoto,\r\n  } as MapStatePropsType\r\n};\r\ntype MapStatePropsType={\r\n  posts: Array<postsType>\r\n  myProfilePhoto: string\r\n}\r\nexport default connect<MapStatePropsType, {}, {}, AppStateType>(mapStateToPtops, {})(MyPosts);\r\n","import { FC } from \"react\";\r\nimport ProfileInfoConteiner from \"./MyPosts/ProfileInfo/ProfileInfoConteiner\";\r\nimport MyPostsConteiner from \"./MyPosts/MyPostsConteiner\";\r\nimport { profileType } from \"../../types/types\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { getProfile } from \"../../redux/profile-selector\";\r\n\r\ntype PropsType = {\r\n  isOwner: boolean\r\n}\r\n\r\nconst Profile:FC<PropsType> = ({ isOwner }) => {\r\n  const profile = useSelector(getProfile)  \r\n  const dispatch = useDispatch()\r\n  const getStatus = (userId:number)=> {\r\n    dispatch(getStatus(userId))\r\n  }\r\n  const updateStatus = (status: string)=> {\r\n    dispatch(updateStatus(status))\r\n  }\r\n  const addPosts = (newPost: string)=> {\r\n    dispatch(addPosts(newPost))\r\n  }\r\n  const savePhoto = (file: File)=> {\r\n    dispatch(savePhoto(file))\r\n  }\r\n  const saveProfile = (profile: profileType)=> {\r\n    dispatch(saveProfile(profile))\r\n  }\r\n  return (\r\n    <div>\r\n      <ProfileInfoConteiner profile={profile} isOwner={isOwner} getStatus={getStatus}\r\n      updateStatus={updateStatus} addPosts={addPosts} savePhoto= {savePhoto}  saveProfile={saveProfile} />\r\n      <MyPostsConteiner />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Profile;\r\n","import React from \"react\";\r\nimport Preloader from \"../../common/Preloader/Preloader\";\r\n\r\nfunction withSuspense<WCP>(WrappedComponent: React.ComponentType<WCP>) {\r\n  return (props: WCP) => {\r\n    return (\r\n      <React.Suspense fallback={<Preloader />}>\r\n        <WrappedComponent {...props} />\r\n      </React.Suspense>\r\n    );\r\n  };\r\n}\r\n\r\nexport default withSuspense;\r\n","import React from \"react\";\r\nimport Profile from \"./Profile\";\r\nimport withAuthRedirect from \"../HOC/withSuspense\";\r\nimport { connect } from \"react-redux\";\r\nimport { RouteComponentProps, withRouter } from \"react-router\";\r\nimport { compose } from \"redux\";\r\nimport { getUserId } from \"../../redux/profile-selector\";\r\nimport { getUser } from \"../../redux/profile-reduser\";\r\nimport { AppStateType } from \"../../redux/redux-store\";\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\nexport type DistatchType = {  \r\n  getUser:(userId: number)=> void  \r\n}\r\ntype PathParamsType = {\r\n  userId: string,\r\n}\r\ntype PropsType = MapPropsType & DistatchType & RouteComponentProps<PathParamsType>\r\n\r\nclass ProfileConteiner extends React.Component<PropsType>{\r\n  refreshProfile = () => {\r\n    this.props.getUser(this.props.match.params.userId || this.props.userId);\r\n  };\r\n  componentDidMount() {\r\n    this.refreshProfile();\r\n  }\r\n  componentDidUpdate() { \r\n      this.refreshProfile();    \r\n  }\r\n  render() {\r\n    return (\r\n      <Profile {...this.props} isOwner={!this.props.match.params.userId} />\r\n    );\r\n  }\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n  return {   \r\n    userId: getUserId(state),\r\n  };\r\n};\r\n\r\nexport default compose(\r\n  withAuthRedirect,\r\n  withRouter,\r\n  connect(mapStateToProps, {  getUser })\r\n)(ProfileConteiner);\r\n","import React from \"react\";\r\nimport styles from \"./Login.module.css\";\r\nimport { InjectedFormProps, reduxForm } from \"redux-form\";\r\nimport {\r\n  createField,\r\n  GetStringKeys,\r\n  Input,\r\n} from \"../../common/FormsControls/FormsControls\";\r\nimport { reaquired } from \"../../helpers/validators/validators\";\r\n\r\ntype LoginFormOwnType = {\r\n  captchaUrl: string | null;\r\n};\r\nexport type LoginFormType = {\r\n  email: string;\r\n  password: string;\r\n  rememberMe: boolean;\r\n  captcha: string;\r\n};\r\ntype LoginFormTypeKeys = GetStringKeys<LoginFormType>;\r\n\r\nconst LoginForm: React.FC<\r\n  InjectedFormProps<LoginFormType, LoginFormOwnType> & LoginFormOwnType> = ({ handleSubmit, error, captchaUrl }) => {  \r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      {createField<LoginFormTypeKeys>(\"login\", \"email\", [reaquired], Input)}\r\n      {createField<LoginFormTypeKeys>(\r\n        \"password\",\r\n        \"password\",\r\n        [reaquired],\r\n        Input,\r\n        \"password\"\r\n      )}\r\n      {captchaUrl && <img src={captchaUrl} alt={\"captchaUrl\"} />}\r\n      {captchaUrl &&\r\n        createField<LoginFormTypeKeys>(\r\n          \"symbol from img\",\r\n          \"captcha\",\r\n          [reaquired],\r\n          Input,\r\n          \"\",\r\n          {}\r\n        )}\r\n      {error && <div className={styles.formSummaryError}>{error}</div>}\r\n      {createField<LoginFormTypeKeys>(\r\n        \"\",\r\n        \"rememberMe\",\r\n        [],\r\n        Input,\r\n        \"checkbox\"\r\n      )}{\" \"}\r\n      remember me\r\n      <div>\r\n        <button>Submit</button>\r\n        <button style={{ margin: \"10px\" }}>\r\n          {\" \"}\r\n          <a href=\"https://social-network.samuraijs.com/signUp\">Sing Up</a>\r\n        </button>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default reduxForm<LoginFormType, LoginFormOwnType>({ form: \"login\" })(\r\n  LoginForm\r\n);\r\n","import { instanse, ResponseType, ResultCodeWithCaptcha, ResultCode } from \"./api\";\r\n\r\ntype MeResponseDataType = { id: number, email: string, login: string };\r\ntype LoginResponseType = { userId: number }\r\n\r\nexport const authAPI = {\r\n  login: ( email: string, password: string, rememberMe = false, captcha: null | string = null ) =>\r\n    instanse\r\n      .post<ResponseType<LoginResponseType , ResultCode | ResultCodeWithCaptcha>>(`auth/login`, {\r\n        email, password, rememberMe, captcha,\r\n      })\r\n      .then((response) => response.data),\r\n  logout: () =>\r\n    instanse\r\n      .delete(`auth/login`)\r\n      .then((response) => response.data),\r\n  me: () =>\r\n    instanse\r\n      .get<ResponseType<MeResponseDataType>>(`auth/me`)\r\n      .then((response) => response.data),\r\n};","import { instanse } from \"./api\";\r\n\r\nexport type GetCaptchaUrlType = {\r\n  url: string;\r\n};\r\n\r\nexport const securityAPI = {\r\n  getCaptchaUrl: () => instanse.get<GetCaptchaUrlType>(`security/get-captcha-url`).then((response) => response),\r\n};","import { FormAction, stopSubmit } from \"redux-form\";\r\nimport { ResultCode, ResultCodeWithCaptcha } from \"../API/api\";\r\nimport { authAPI } from \"../API/AuthAPI\";\r\nimport { securityAPI } from \"../API/SecurityAPI\";\r\nimport { profileAPI } from \"../API/ProfileAPI\";\r\nimport * as profileReduser from \"./profile-reduser\";\r\nimport { BaseThunkType, InferActionTypes } from \"./redux-store\";\r\n\r\nlet initialState = {\r\n  isFetching: false as boolean,\r\n  userId: null as number | null,\r\n  login: null as string | null,\r\n  email: null as string | null,\r\n  isAuth: false,\r\n  avatar: null as string | null,\r\n  captchaUrl: null as string | null,\r\n};\r\n\r\nconst authReducer = (state = initialState, action: ActionsType): initialStateType => {\r\n  switch (action.type) {\r\n    case \"auth/SET_USER_DATA\":\r\n    case \"auth/GET_CAPTCHA_URL_SUCCESS\":\r\n      return {\r\n        ...state,        \r\n        ...action.payload,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const actions = {\r\n  getCaptchaUrlSuccess: (captchaUrl: string) => ({ type: \"auth/GET_CAPTCHA_URL_SUCCESS\", payload: { captchaUrl } }as const ),\r\n  setAuthUserData: ( userId: number | null, login: string | null, email: string | null, isAuth: boolean ) => ({\r\n    type: \"auth/SET_USER_DATA\", payload: { userId, login, email, isAuth } } as const ),\r\n};\r\nexport const auth = (): ThunkType => async (dispatch) => {\r\n  let response = await authAPI.me();\r\n  if (response.resultCode === 0) {\r\n    let { id, login, email } = response.data;\r\n    dispatch(actions.setAuthUserData(id, login, email, true));\r\n    profileAPI.getUser(id).then((response: any) => {\r\n      dispatch(profileReduser.actions.setMyProfile(response.photos.small));\r\n    });\r\n  }\r\n};\r\nexport const getAuthMeData = (): ThunkType => async (dispatch) => {\r\n  let response = await authAPI.me();\r\n  if (response.resultCode === ResultCode.Success) {\r\n    let { id, login, email } = response.data;\r\n    dispatch(actions.setAuthUserData(id, login, email, true));\r\n  }\r\n};\r\nexport const login = ( email: string, password: string, rememberMe: boolean, captcha: string): ThunkType => \r\nasync (dispatch) => {\r\n  let response = await authAPI.login(email, password, rememberMe, captcha);\r\n  if (response.resultCode === ResultCode.Success) {\r\n    dispatch(getAuthMeData());\r\n  } else {\r\n    if (response.resultCode === ResultCodeWithCaptcha.CaptchaIsRequired) {\r\n      dispatch(getCaptchaUrl());\r\n    }\r\n    let messages = response.messages.length > 0\r\n        ? response.messages[0]\r\n        : \"common error\";\r\n    dispatch(stopSubmit(\"login\", { _error: messages }));\r\n  }\r\n};\r\nexport const getCaptchaUrl = (): ThunkType => async (dispatch) => {\r\n  const response = await securityAPI.getCaptchaUrl();\r\n  dispatch(actions.getCaptchaUrlSuccess(response.data.url));\r\n};\r\nexport const logout = () => async (dispatch: any) => {\r\n  let response = await authAPI.logout();\r\n  if (response.resultCode === ResultCode.Success) {\r\n    dispatch(actions.setAuthUserData(null, null, null, false));\r\n  }\r\n};\r\n\r\nexport default authReducer;\r\n\r\nexport type initialStateType = typeof initialState;\r\ntype ActionsType = InferActionTypes<typeof actions>\r\ntype ThunkType = BaseThunkType<ActionsType | FormAction>","import { AppStateType } from \"../../redux/redux-store\";\r\n\r\nexport const getCaptchaUrl = (state:AppStateType) => state.auth.captchaUrl;\r\nexport const getIsAuth = (state:AppStateType) => state.auth.isAuth;\r\n","import React from \"react\";\r\nimport LoginForm, { LoginFormType } from \"./LoginReduxForm\";\r\nimport styles from \"./Login.module.css\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { login } from \"../../redux/auth-reduser\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { getCaptchaUrl, getIsAuth } from \"./login-selector\";\r\n\r\nexport const Login: React.FC = (props) => {\r\n  const captchaUrl = useSelector(getCaptchaUrl)\r\n  const isAuth = useSelector(getIsAuth)\r\n  const dispatch = useDispatch()\r\n  const onSubmit = (formData: LoginFormType)=>{\r\n    dispatch(login(formData.email, formData.password, formData.rememberMe, formData.captcha))\r\n  } \r\n  if (isAuth) {\r\n    return <Redirect to={\"/profile\"} />;\r\n  }\r\n  return (\r\n    <div className={styles.login}>\r\n      <h3>Login</h3>\r\n      <LoginForm\r\n        onSubmit={onSubmit}\r\n        captchaUrl={captchaUrl}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n","import { Button, Input } from \"antd\";\r\nimport styles from \"./../Chat/ChatPage.module.css\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport Avatar from \"antd/lib/avatar/avatar\";\r\nconst { TextArea } = Input;\r\n\r\nconst wsChanal = new WebSocket(\r\n  \"wss://social-network.samuraijs.com/handlers/ChatHandler.ashx\"\r\n);\r\n\r\ntype messageType = {\r\n  message: string;\r\n  photo: string;\r\n  userId: number;\r\n  userName: string;\r\n};\r\nexport const ChatPage: React.FC = () => {\r\n  return (\r\n    <div>\r\n      <Chat />\r\n    </div>\r\n  );\r\n};\r\n\r\nconst Chat: React.FC = () => {\r\n  return (\r\n    <div>\r\n      <Messages />\r\n      <AddMessageForm />\r\n    </div>\r\n  );\r\n};\r\n\r\nconst Messages: React.FC = (props) => {\r\n  const [messages, setMessages] = useState<messageType[]>([]);\r\n  useEffect(() => {\r\n    wsChanal.addEventListener(\"message\", (e: MessageEvent) => {\r\n      let newMessages = JSON.parse(e.data);\r\n      setMessages((prevMessages) => [...prevMessages, ...newMessages]);\r\n    });\r\n  }, []);\r\n  return (\r\n    <div className={styles.messeges}>\r\n      {messages.map((m, index) => (\r\n        <Message key={index} message={m} />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst Message: React.FC<{ message: messageType }> = ({ message }) => {\r\n  return (\r\n    <div>\r\n      <div>\r\n        <Avatar size={40} src={message.photo}>\r\n          USER\r\n        </Avatar>\r\n        {message.message}\r\n      </div>\r\n      <div>{message.userName}</div>\r\n      <hr />\r\n    </div>\r\n  );\r\n};\r\n\r\nconst AddMessageForm = () => {\r\n  const [message, setMessage] = useState(\"\");\r\n  const onChange = (e: any) => {\r\n    setMessage(e.target.value);\r\n  };\r\n  const sendMessage = () => {\r\n    if (!message) {\r\n      return;\r\n    }\r\n    wsChanal.send(message);\r\n    setMessage(\"\");\r\n  };\r\n\r\n  return (\r\n    <div className={styles.textarea}>\r\n      <TextArea\r\n        rows={3}\r\n        onChange={onChange}\r\n        placeholder=\"Enter your massage\"\r\n        value={message}\r\n      />\r\n      <div>\r\n        <Button type=\"primary\" className={styles.button} onClick={sendMessage}>\r\n          Send\r\n        </Button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","export const updateObjectInArray = ( items: any, itemsId: any, objPropName: any, newObjProps: any) => {\r\n  return items.map((u: any) => {\r\n    if (u[objPropName] === itemsId) {\r\n      return { ...u, ...newObjProps };\r\n    }\r\n    return u;\r\n  });\r\n};\r\n","\r\nimport { GetItemsType, instanse, ResultCode, ResponseType } from \"./api\";\r\n\r\nexport type FollowUnfollowResponseType = {\r\n  resultCode: ResultCode\r\n  messages: Array<string>,\r\n  data: {}\r\n};\r\n\r\nexport const usersAPI = {\r\n  getUsers: (pageNumber: number = 1, pageSize: number, term: string= \"\", friend: null| boolean= null) => {\r\n    return instanse\r\n      .get<GetItemsType>(`users?page=${pageNumber}&count=${pageSize}&term=${term}` +\r\n        (friend === null ? \"\" : `&friend=${friend}`)\r\n      )\r\n      .then((response) => response.data);\r\n  },\r\n  unfollow: (id: number) => {\r\n    return instanse\r\n      .delete(`follow/${id}`) \r\n      .then((response) => response.data) as Promise<ResponseType>\r\n  },\r\n  follow: (id: number) => {\r\n    return instanse\r\n      .post<ResponseType>(`follow/${id}`)\r\n      .then((response) => response.data);\r\n  },\r\n};\r\n\r\n","import { userType } from \"./../types/types\";\r\nimport { updateObjectInArray } from \"../helpers/validators/objects-helpers\";\r\nimport { InferActionTypes, BaseThunkType } from \"./redux-store\";\r\nimport { usersAPI } from \"../API/UserAPI\";\r\n\r\nlet initialState = { \r\n  users: [] as Array<userType>,\r\n  pageSize: 100 as number,\r\n  totalUsersCount: 11910 as number,\r\n  currentPage: 1 as number,\r\n  isFetching: true as boolean,\r\n  followingInProgress: [] as Array<number>, //array of users ids\r\n  filter: {\r\n    term: \"\" as string,\r\n    friend: null as null | boolean,\r\n  },\r\n};\r\n\r\nconst usersReducer = (\r\n  state = initialState,\r\n  action: ActionsTypes\r\n): initialStateType => {\r\n  switch (action.type) {\r\n    case \"user/FOLLOW\":\r\n      return {\r\n        ...state,\r\n        users: updateObjectInArray(state.users, action.userId, \"id\", {\r\n          followed: true,\r\n        }),\r\n      };\r\n    case \"user/UNFOLLOW\":\r\n      return {\r\n        ...state,\r\n        users: updateObjectInArray(state.users, action.userId, \"id\", {\r\n          followed: false,\r\n        }),\r\n      };\r\n    case \"user/SET_USERS\":\r\n      return {\r\n        ...state,\r\n        users: [...action.users],\r\n      };\r\n    case \"user/SET_CURRENT_PAGE\":\r\n      return {\r\n        ...state,\r\n        currentPage: action.currentPage,\r\n      };\r\n    case \"user/SET_TOTAL_USERS_CURRENT\":\r\n      return {\r\n        ...state,\r\n        totalUsersCount: action.totalCount,\r\n      };\r\n    case \"user/TOGGLE_IS_FETCHING\":\r\n      return {\r\n        ...state,\r\n        isFetching: action.isFetching,\r\n      };\r\n    case \"user/SET_FILTER\":\r\n      return { ...state, filter: action.payload };\r\n    case \"user/TOGGLE_IS_FOLLOWING_PROGRESS\":\r\n      return {\r\n        ...state,\r\n        followingInProgress: action.isFetching\r\n          ? [...state.followingInProgress, action.id]\r\n          : state.followingInProgress.filter((id) => id !== action.id),\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const actions = {\r\n  followSucsess: (userId: number) => ({ type: \"user/FOLLOW\", userId } as const),\r\n  unfollowSucsess: (userId: number) =>\r\n    ({ type: \"user/UNFOLLOW\", userId } as const),\r\n  setUsers: (users: Array<userType>) =>\r\n    ({ type: \"user/SET_USERS\", users } as const),\r\n  setFilter: (filter: FilterType) =>\r\n    ({ type: \"user/SET_FILTER\", payload: filter } as const),\r\n  setCurrentPages: (currentPage: number) =>\r\n    ({ type: \"user/SET_CURRENT_PAGE\", currentPage } as const),\r\n  setTotalUsersCount: (totalCount: number) =>\r\n    ({ type: \"user/SET_TOTAL_USERS_CURRENT\", totalCount } as const),\r\n  toggleIsFetching: (isFetching: boolean) =>\r\n    ({ type: \"user/TOGGLE_IS_FETCHING\", isFetching } as const),\r\n  toggleFollow: (isFetching: boolean, id: number) =>\r\n    ({ type: \"user/TOGGLE_IS_FOLLOWING_PROGRESS\", isFetching, id } as const),\r\n};\r\nexport const getUsersAC = (\r\n  page: number,\r\n  pageSize: number,\r\n  filter: FilterType\r\n): ThunkType => async (dispatch) => {\r\n  dispatch(actions.toggleIsFetching(true));\r\n  dispatch(actions.setCurrentPages(page));\r\n  dispatch(actions.setFilter(filter));\r\n  let response = await usersAPI.getUsers(\r\n    page,\r\n    pageSize,\r\n    filter.term,\r\n    filter.friend\r\n  );\r\n  dispatch(actions.setUsers(response.items));\r\n  dispatch(actions.setTotalUsersCount(response.totalCount));\r\n  dispatch(actions.toggleIsFetching(false));\r\n};\r\nexport const unfollow = (id: number): ThunkType => async (dispatch) => {\r\n  dispatch(actions.toggleFollow(true, id));\r\n  let response = await usersAPI.unfollow(id);\r\n  if (response.resultCode === 0) {\r\n    dispatch(actions.unfollowSucsess(id));\r\n  }\r\n  dispatch(actions.toggleFollow(false, id));\r\n};\r\nexport const follow = (id: number): ThunkType => async (dispatch) => {\r\n  dispatch(actions.toggleFollow(true, id));\r\n  let response = await usersAPI.follow(id);\r\n  if (response.resultCode === 0) {\r\n    dispatch(actions.followSucsess(id));\r\n  }\r\n  dispatch(actions.toggleFollow(false, id));\r\n};\r\n\r\nexport default usersReducer;\r\n\r\nexport type initialStateType = typeof initialState;\r\nexport type FilterType = typeof initialState.filter;\r\ntype ActionsTypes = InferActionTypes<typeof actions>;\r\ntype ThunkType = BaseThunkType<ActionsTypes>;\r\n","import { InferActionTypes } from './redux-store';\r\nimport { auth } from \"./auth-reduser\";\r\n\r\nlet initialState = {\r\n  initialized: false,\r\n};\r\nexport type initialStateType = typeof initialState;\r\ntype ActionsType = InferActionTypes<typeof actions>\r\n\r\nconst appReducer = (state = initialState, action: ActionsType): initialStateType => {\r\n  switch (action.type) {\r\n    case \"app/SET_INITIALIZED\":\r\n      return {\r\n        ...state,\r\n        initialized: true,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const actions = {\r\n  setInitializedSuccess: () => ({ type: \"app/SET_INITIALIZED\" } as const),\r\n}\r\n\r\nexport const initializeApp = () => {\r\n  return (dispatch: any) => {\r\n    const promise = dispatch(auth());\r\n    Promise.all([promise]).then(() => dispatch(actions.setInitializedSuccess));\r\n  };\r\n};\r\n\r\nexport default appReducer;\r\n","import { Action, applyMiddleware, combineReducers, compose, createStore } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport authReducer from \"./auth-reduser\";\r\nimport dialodsReducer from \"./dialogs-reduser\";\r\nimport profileReducer from \"./profile-reduser\";\r\nimport usersReducer from \"./users-reduser\";\r\nimport * as reduxForm from \"redux-form\";\r\nimport appReducer from \"./app-reduser\";\r\nimport { ThunkAction } from \"redux-thunk\";\r\n\r\nlet rootRedusers = combineReducers({\r\n  profilePage: profileReducer,\r\n  dialogsPage: dialodsReducer,\r\n  usersPage: usersReducer,\r\n  auth: authReducer,\r\n  form: reduxForm.reducer,\r\n  app: appReducer,\r\n});\r\n\r\ntype rootRedusersType = typeof rootRedusers;\r\nexport type AppStateType = ReturnType<rootRedusersType>;\r\nexport type InferActionTypes<T> = T extends {[key: string]: (...args: any[]) => infer U } ? U : never\r\nexport type BaseThunkType<A extends Action = Action, R=Promise<void>> = ThunkAction<R, AppStateType,unknown, A>\r\n//@ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore( rootRedusers,  composeEnhancers(applyMiddleware(thunk)));\r\n//@ts-ignore\r\nwindow.store = store;\r\nexport default store;\r\n\r\n\r\n","import React from \"react\";\r\nimport styles from \"./InputForm.module.css\";\r\n\r\nconst InputForm = (props) => {\r\n  return (\r\n    <div className={styles.input_form}>\r\n      <form onSubmit={props.onSubmit} id=\"myForm\" className={styles.formik}>\r\n        <input\r\n          className={styles.input}\r\n          type=\"text\"\r\n          placeholder=\"Add to-do\"\r\n          onChange={props.onChange}\r\n        />\r\n        <button className={styles.add}>+add</button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default InputForm;\r\n","import React from \"react\";\r\nimport styles from \"./ToDo.module.css\";\r\n\r\nconst ToDo = (props) => {\r\n  return (\r\n    <div className={styles.to_do}>\r\n      {props.task}\r\n      <button\r\n        className={styles.right}\r\n        onClick={() => props.onDelete(props.index)}\r\n      ></button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ToDo;\r\n","import ToDo from \"../ToDo/ToDo\";\r\nimport styles from \"./ToDoList.module.css\";\r\n\r\nconst ToDoList = (props) => {\r\n  const toDoList = props.lists.map((list) => {\r\n    return (\r\n      <ToDo\r\n        key={list.id}\r\n        task={list.task}\r\n        index={list.id}\r\n        onDelete={props.onDelete}\r\n      />\r\n    );\r\n  });\r\n  return <div className={styles.toDoList}>{toDoList}</div>;\r\n};\r\n\r\nexport default ToDoList;\r\n","import React from \"react\";\r\nimport styles from \"./TaskIndicator.module.css\";\r\n\r\nconst TaskIndicator = (props) => {\r\n  return (\r\n    <div className={styles.header}>\r\n      <h3 className={styles.h3}>\r\n        {`You have ${props.number} ${props.number === 1 ? \" task\" : \" tasks\"}`}\r\n      </h3>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TaskIndicator;\r\n","import styles from \"./MyToDoList.module.css\";\r\nimport { Component } from \"react\";\r\nimport InputForm from \"./components/InputForm/InputForm\";\r\nimport ToDoList from \"./components/ToDoList/ToDoList\";\r\nimport TaskIndicator from \"./components/TaskIndicator/TaskIndicator\";\r\n\r\n\r\nclass MyToDoList extends Component {\r\n  state = {\r\n    lists: [ { task: \"Keep calm and carry on\", id: 1 } ],\r\n    input: \"\",\r\n  };\r\n  handleChange = (e) => {\r\n    this.setState({ input: e.target.value });\r\n  };\r\n  handleSubmit = (e) => {\r\n    let list;\r\n    e.preventDefault();\r\n    if (this.state.input === \"\") {\r\n      return;\r\n    } else {\r\n      list = { task: this.state.input, id: this.state.lists.length + 1 };\r\n    }\r\n    this.setState({ lists: [...this.state.lists, list], input: \"\" });\r\n    document.getElementById(\"myForm\").reset();\r\n  };\r\n  handleDelete = (index) => {\r\n    const filteredList = this.state.lists.filter((list) => {\r\n      return list.id !== index;\r\n    });\r\n    this.setState({ lists: filteredList });\r\n  };\r\n  render() {\r\n    return (\r\n      <div className={styles.todolist}>\r\n        <InputForm onChange={this.handleChange} onSubmit={this.handleSubmit} />\r\n        <ToDoList lists={this.state.lists} onDelete={this.handleDelete} />\r\n        <TaskIndicator number={this.state.lists.length} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MyToDoList;\r\n","import { FC } from \"react\";\r\nimport styles from \"./Users.module.css\";\r\nimport avatar from \"./../../img/user-male.png\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport { userType } from \"../../types/types\";\r\n\r\ntype PropsType = {\r\n  user: userType;\r\n  followingInProgress: Array<number>;\r\n  unfollow: (id: number) => void;\r\n  follow: (id: number) => void;\r\n};\r\n\r\nconst User: FC<PropsType> = ({ user, followingInProgress, unfollow, follow }) => {\r\n  let status = user.status;  \r\n  return (\r\n    <div className={styles.user}>\r\n      <span>\r\n        <div className={styles.userPhoto}>\r\n          <NavLink to={`/profile/${user.id}`}>\r\n            <img className={styles.user_img} src={user.photos.small || avatar} alt=\"foto\" />\r\n          </NavLink>\r\n        </div>\r\n        <div className={styles.button}>\r\n          {user.followed ? (\r\n            <button disabled={followingInProgress.some((id) => id === user.id)}\r\n              onClick={() => { unfollow(user.id)}} >\r\n              Unfollow\r\n            </button>\r\n          ) : (\r\n            <button disabled={followingInProgress.some((id) => id === user.id)}\r\n              onClick={() => { follow(user.id) }} >\r\n              Follow\r\n            </button>\r\n          )}\r\n        </div>\r\n      </span>\r\n      <span className={styles.user_info}>\r\n        <div className={styles.item_info}>Name: {user.name}</div>\r\n        <div className={styles.item_info}>{!!status ? (status.length > 30 ? status.substr(0, 30) : status) : \"no status\"}</div>\r\n        <div className={styles.item_info}> id : {user.id}</div>\r\n      </span>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default User;\r\n","import { createSelector } from \"reselect\";\r\nimport { AppStateType } from \"./redux-store\";\r\n\r\nexport const getUsers = (state:AppStateType) => state.usersPage.users;\r\nexport const getUsersSuperSelector = createSelector(getUsers, (users) => users.filter((u) => true));\r\nexport const getPageSize = (state:AppStateType) => state.usersPage.pageSize;\r\nexport const getTotalUsersCount = (state:AppStateType) => state.usersPage.totalUsersCount;\r\nexport const getCurrentPage = (state:AppStateType) => state.usersPage.currentPage;\r\nexport const getIsFetching = (state:AppStateType) => state.usersPage.isFetching;\r\nexport const getFollowingInProgress = (state:AppStateType) => state.usersPage.followingInProgress;\r\nexport const getUsersFilter = (state:AppStateType) => state.usersPage.filter;\r\n","import React from \"react\";\r\nimport { Field, Form, Formik } from \"formik\";\r\nimport { FilterType } from \"../../redux/users-reduser\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { getUsersFilter } from \"../../redux/users-selector\";\r\nimport styles from \"./Users.module.css\";\r\n\r\nconst userFormValitate = () => {\r\n  const errors = {};\r\n  return errors;\r\n};\r\ntype PropsType = {\r\n  onFilterChanged: (filter: FilterType) => void;\r\n};\r\ntype FriendTFormype = \"true\" | \"false\" | \"null\"\r\ntype FormType = {\r\n term: string\r\n friend: FriendTFormype\r\n};\r\nconst UsersSearchForm: React.FC<PropsType> = React.memo((props) => {\r\n  const filter = useSelector(getUsersFilter)\r\n  const submit = ( values: FormType, { setSubmitting }: { setSubmitting: (isSubmitting: boolean) => void }\r\n  ) => {\r\n    const filter:FilterType  = {\r\n      term: values.term,\r\n      friend: values.friend ===\"null\" ? null: values.friend ===\"true\" ? true :  false\r\n     }\r\n    props.onFilterChanged(filter);\r\n    setSubmitting(false);\r\n  };\r\n  return (\r\n    <Formik\r\n      enableReinitialize={true}\r\n      initialValues={{ term: filter.term, friend: String(filter.friend) as FriendTFormype}}\r\n      validate={userFormValitate}\r\n      onSubmit={submit}\r\n    >\r\n      {({ isSubmitting }) => (\r\n        <Form className={styles.form}>\r\n          <Field type=\"text\" name=\"term\" />\r\n          <Field name=\"friend\" as=\"select\">\r\n            <option value=\"null\">all </option>\r\n            <option value=\"true\">Only followed</option>\r\n            <option value=\"false\">Only unfollowed</option>\r\n          </Field>\r\n          <button type=\"submit\" disabled={isSubmitting}>\r\n            Find\r\n          </button>\r\n        </Form>\r\n      )}\r\n    </Formik>\r\n  );\r\n});\r\n\r\nexport default UsersSearchForm;\r\n","import styles from \"./Users.module.css\";\r\nimport { Pagination } from 'antd';\r\nimport User from \"./User\";\r\nimport UsersSearchForm from \"./UsersSearchForm\";\r\nimport { FC, useEffect } from \"react\";\r\nimport { FilterType, follow, getUsersAC, unfollow } from \"../../redux/users-reduser\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { getCurrentPage, getFollowingInProgress, getPageSize,\r\n  getTotalUsersCount, getUsers, getUsersFilter } from \"./../../redux/users-selector\";\r\nimport { useHistory } from \"react-router\";\r\nimport * as queryString from \"querystring\";\r\n\r\ntype queryParams = {\r\n  term?: string;\r\n  page?: string;\r\n  friend?: string;\r\n};\r\n\r\nexport const Users: FC = (props) => {\r\n  const totalUsersCount = useSelector(getTotalUsersCount);\r\n  const currentPage = useSelector(getCurrentPage);\r\n  const pageSize = useSelector(getPageSize);\r\n  const filter = useSelector(getUsersFilter);\r\n  const users = useSelector(getUsers);\r\n  const followingInProgress = useSelector(getFollowingInProgress);\r\n  const dispatch = useDispatch();\r\n  const onPageChenged = (pageNumber: number) => {\r\n    dispatch(getUsersAC(pageNumber, pageSize, filter));\r\n  };\r\n  const onFilterChanged = (filter: FilterType) => {\r\n    dispatch(getUsersAC(1, pageSize, filter));\r\n  };\r\n  const onFollow = (id: number) => {\r\n    dispatch(follow(id));\r\n  };\r\n  const onUnfollow = (id: number) => {\r\n    dispatch(unfollow(id));\r\n  };\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    const parsed = queryString.parse(\r\n      history.location.search.substr(1)\r\n    ) as queryParams;\r\n    let actualPage = currentPage;\r\n    let actualFilter = filter;\r\n    if (!!parsed.page) actualPage = Number(parsed.page);\r\n    if (!!parsed.term)\r\n      actualFilter = { ...actualFilter, term: parsed.term as string };\r\n    switch (parsed.friend) {\r\n      case \"null\":\r\n        actualFilter = { ...actualFilter, friend: null };\r\n        break;\r\n      case \"true\":\r\n        actualFilter = { ...actualFilter, friend: true };\r\n        break;\r\n      case \"false\":\r\n        actualFilter = { ...actualFilter, friend: false };\r\n        break;\r\n    }\r\n    dispatch(getUsersAC(actualPage, pageSize, actualFilter))}, [history, pageSize]);\r\n  useEffect(() => {\r\n    const query: queryParams = {};\r\n    if (!!filter.term) query.term = filter.term;\r\n    if (filter.friend !== null) query.friend = String(filter.friend);\r\n    if (currentPage !== 1) query.page = String(currentPage);\r\n    history.push({\r\n      pathname: \"/developers\",\r\n      search: queryString.stringify(query),\r\n    });\r\n  }, [filter, currentPage, history]);\r\n  return (\r\n    <div>\r\n      <UsersSearchForm onFilterChanged={onFilterChanged} />\r\n      <Pagination className={styles.pagination} showSizeChanger={false} defaultCurrent={1} pageSize={100} total={totalUsersCount} current={currentPage} onChange={onPageChenged}/>\r\n      <div className={styles.users}>\r\n        {users.map((u) => (\r\n          <User\r\n            key={u.id}\r\n            user={u}\r\n            followingInProgress={followingInProgress}\r\n            follow={onFollow}\r\n            unfollow={onUnfollow}\r\n          />\r\n        ))}       \r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport Preloader from \"../../common/Preloader/Preloader\";\r\nimport {Users} from \"./Users\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { getIsFetching } from \"../../redux/users-selector\";\r\n\r\n type UserPagePropsType = {};\r\n export const UserPage: React.FC<UserPagePropsType> = (props) => {\r\n  const isFetching = useSelector(getIsFetching);\r\n  return (\r\n    <>\r\n      {isFetching ? <Preloader /> : null}\r\n      <Users />\r\n    </>\r\n  );\r\n};\r\n","import { AppStateType } from \"./redux-store\";\r\n\r\nexport const selectAuth = (state:AppStateType) => state.auth.isAuth;\r\nexport const selectAvatar= (state:AppStateType) => state.profilePage.myProfilePhoto\r\nexport const selectLogin= (state:AppStateType) => state.auth.login;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Button, Col, Layout, Menu, Row } from \"antd\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { selectLogin, selectAuth, selectAvatar,} from \"./../../redux/auth-selector\";\r\nimport { logout } from \"../../redux/auth-reduser\";\r\nimport Text from \"antd/lib/typography/Text\";\r\n\r\nexport type MapPropsType = {};\r\n\r\nexport const Header: React.FC<MapPropsType> = () => {\r\n  const isAuth = useSelector(selectAuth);\r\n  const login = useSelector(selectLogin);\r\n  let avatar = useSelector(selectAvatar);\r\n  const dispatch = useDispatch();\r\n  const logoutCallback = () => {\r\n    dispatch(logout());\r\n  };\r\n  const { Header } = Layout;\r\n  return (\r\n    <Header className=\"header\">\r\n      <Row>\r\n        <Col className=\"gutter-row\" span={4} offset={1}>\r\n          <Menu theme=\"dark\" mode=\"horizontal\" defaultSelectedKeys={[\"2\"]}>\r\n            <Menu.Item key=\"1\">\r\n              <Link to=\"/developers\">Developers</Link>\r\n            </Menu.Item>\r\n          </Menu>\r\n        </Col>\r\n        {isAuth ? (\r\n          <>\r\n            <Col className=\"gutter-row\" span={1} offset={11}>\r\n              <img src={avatar || \"\"} width=\"32px\" alt={\"avatar\"}/>              \r\n            </Col>\r\n            <Col className=\"gutter-row\" span={2}>              \r\n              <Text type=\"warning\" keyboard >{login} </Text>\r\n            </Col>\r\n            <Col className=\"gutter-row\" span={2}>\r\n              <Button onClick={logoutCallback}>Log out</Button>\r\n            </Col>\r\n          </>\r\n        ) : (\r\n          <Col className=\"gutter-row\" span={6}>\r\n            <Button>\r\n              <Link to={\"/login\"}>Login</Link>\r\n            </Button>\r\n          </Col>\r\n        )}\r\n      </Row>\r\n    </Header>\r\n  );\r\n};\r\n","import \"antd/dist/antd.css\";\r\nimport { Statistic, Row, Col } from \"antd\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { selectTotalItemsCount } from \"../../redux/profile-selector\";\r\n\r\nconst UsersStatistic = () => {\r\n    const userStatistic = useSelector(selectTotalItemsCount)    \r\n  return (\r\n    <Row gutter={16}>\r\n      <Col span={12}>\r\n        <Statistic title=\"Active Users\" value={userStatistic} />\r\n      </Col>\r\n    </Row>\r\n  );\r\n};\r\n\r\nexport default UsersStatistic;\r\n","import React from \"react\";\r\nimport Setting from \"./components/Setting/Setting\";\r\nimport DialodsConteiner from \"./components/Dialods/DialodsConteiner\";\r\nimport ProfileConteiner from \"./components/Profile/ProfileContainer\";\r\nimport { Login } from \"./components/Login/Login\";\r\nimport { ChatPage } from \"./../src/Pages/Chat/ChatPage\";\r\nimport Preloader from \"./common/Preloader/Preloader\";\r\nimport store, { AppStateType } from \"./redux/redux-store\";\r\nimport withSuspense from \"./components/HOC/withSuspense\";\r\nimport { BrowserRouter, Link, Redirect, Route, Switch, withRouter } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\nimport { initializeApp } from \"./redux/app-reduser\";\r\nimport { compose } from \"redux\";\r\nimport { Provider } from \"react-redux\";\r\nimport \"antd/dist/antd.css\";\r\nimport MyToDoList from \"./components/MyToDoList/MyToDoList\";\r\nimport { UserPage } from \"./components/Users/UsersConteiner\";\r\nimport { Layout, Menu } from \"antd\";\r\nimport { UserOutlined, LaptopOutlined, NotificationOutlined } from \"@ant-design/icons\";\r\nimport { Header } from \"./components/Header/Header\";\r\nimport UsersStatistic from \"./common/UsersStatistic/UsersStatistic\";\r\nconst { SubMenu } = Menu;\r\nconst { Content, Footer, Sider } = Layout;\r\nconst News = React.lazy(() => import(\"./components/News/News\"));\r\nconst Music = React.lazy(() => import(\"./components/Music/Music\"));\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>;\r\ntype DispatchPropsType = {\r\n  initializeApp: () => void;\r\n};\r\n\r\nclass App extends React.Component<MapPropsType & DispatchPropsType> {\r\n  componentDidMount() {\r\n    this.props.initializeApp();\r\n  }\r\n  render() {\r\n    if (this.props.initialized) {\r\n      return <Preloader />;\r\n    }\r\n    return (\r\n      <Layout>\r\n        <Header />\r\n        <Content style={{ padding: \"0 50px\" }}>\r\n          <Layout className=\"site-layout-background\" style={{ padding: \"24px 0\" }} >\r\n            <Sider className=\"site-layout-background\" width={200}>\r\n              <Menu mode=\"inline\" defaultSelectedKeys={[\"1\"]} defaultOpenKeys={[\"sub1\"]} style={{ height: \"100%\" }} >\r\n                <SubMenu key=\"sub1\" icon={<UserOutlined />} title=\"My profile\">\r\n                  <Menu.Item key=\"1\">\r\n                    <Link to=\"/profile\">Profile</Link>\r\n                  </Menu.Item>\r\n                 \r\n                </SubMenu>\r\n                <SubMenu key=\"sub2\" icon={<LaptopOutlined />} title=\"Developers\" >\r\n                  <Menu.Item key=\"2\">\r\n                    <Link to=\"/developers\"> Developers </Link>\r\n                  </Menu.Item>\r\n                  <Menu.Item key=\"3\">\r\n                    <Link to=\"/dialogs\"> Massages </Link>\r\n                  </Menu.Item>\r\n                  <Menu.Item key=\"4\">\r\n                    <Link to=\"/chat\"> Chat</Link>\r\n                  </Menu.Item>\r\n                </SubMenu>\r\n                <SubMenu key=\"sub3\" icon={<NotificationOutlined />}  title=\"Other\" >\r\n                  <Menu.Item key=\"5\">\r\n                    <Link to=\"/music\">Music</Link>\r\n                  </Menu.Item>\r\n                  <Menu.Item key=\"6\">\r\n                    <Link to=\"/todolist\"> My to do list</Link>\r\n                  </Menu.Item>\r\n                  <Menu.Item key=\"7\">\r\n                    <Link to=\"/setting\"> Setting</Link>\r\n                  </Menu.Item>                  \r\n                </SubMenu>\r\n                <UsersStatistic />\r\n              </Menu>\r\n            </Sider>\r\n            <Content style={{ padding: \"0 100px\", minHeight: 280 }}>\r\n              <Switch>\r\n                <Route exact path=\"/\" render={() => <Redirect to={\"/profile\"} />} />\r\n                <Route path=\"/profile/:userId?\" render={() => <ProfileConteiner />} />\r\n                <Route path=\"/dialogs\" render={() => <DialodsConteiner />} />\r\n                <Route path=\"/news\" render={withSuspense(News)} />\r\n                <Route path=\"/music\" render={withSuspense(Music)} />\r\n                <Route path=\"/developers\" render={() => <UserPage />} />\r\n                <Route path=\"/setting\" render={() => <Setting />} />\r\n                <Route path=\"/todolist\" render={() => <MyToDoList />} />\r\n                <Route path=\"/chat\" render={() => <ChatPage />} />\r\n                <Route path=\"/login\" render={() => <Login />} />\r\n                <Route path=\"/\" render={() => <ProfileConteiner />} />\r\n                <Route path=\"*\" render={() => <div> 404 NOT FOUND </div>} />\r\n              </Switch>\r\n            </Content>\r\n          </Layout>\r\n        </Content>\r\n        <Footer style={{ textAlign: \"center\" }}>\r\n          <p> Go © 2021 Created by <a href=\"https://www.linkedin.com/in/aleksandr-danilin-b351b8201/\">al4i</a></p>\r\n        </Footer>\r\n      </Layout>\r\n    );\r\n  }\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n  return {\r\n    initialized: state.app.initialized,\r\n  };\r\n};\r\n\r\nlet AppContainer = compose<React.ComponentType>(\r\n  withRouter,\r\n  connect(mapStateToProps, { initializeApp })\r\n)(App);\r\n\r\nconst MainApp: React.FC = () => {\r\n  return (\r\n    <BrowserRouter>\r\n      <React.StrictMode>\r\n        <Provider store={store}>\r\n          <AppContainer />\r\n        </Provider>\r\n      </React.StrictMode>\r\n    </BrowserRouter>\r\n  );\r\n};\r\n\r\nexport default MainApp;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\nimport MainApp from \"./App\";\r\nimport \"./index.css\";\r\n\r\nReactDOM.render(<MainApp />, document.getElementById(\"root\"));\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"like\":\"Post_like__1ews0\",\"post\":\"Post_post__16l6K\",\"img\":\"Post_img__1GQIz\",\"text\":\"Post_text__mK5CA\",\"likes\":\"Post_likes__3c9SC\"};"],"sourceRoot":""}